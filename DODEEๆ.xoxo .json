{
  "name": "DODEEๆ.xoxo",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.raw_text }}",
        "options": {
          "systemMessage": "=คุณคือผู้เชี่ยวชาญด้านการประมวลผลเอกสารทางการเงิน หน้าที่ของคุณคือการอ่านและสกัดข้อมูลที่สำคัญจากข้อความสลิปโอนเงินด้านล่าง และส่งผลลัพธ์ในรูปแบบ JSON Object ที่มีโครงสร้างชัดเจน\n\nข้อกำหนด:\n- ข้อมูลที่ต้องการสกัด: \"ชื่อผู้โอน\", \"ชื่อผู้รับ\", \"จำนวนเงิน\", \"วันเวลา ที่ทำรายการ\", \"เลขอ้างอิง\", \"บันทึกช่วยจำ\", \"จากธนาคาร\"\n\n- สำหรับ \"จากธนาคาร\" : ให้ระบุชื่อธนาคารจากรายการที่กำหนดเท่านั้น สกัดจากรูปแบบของสลีปให้ได้ หากไม่สามารถระบุได้ต้องพยายามจนกว่าจะได้  ถ้าคิดว่าพยายามมากพอ จนหมดหนทางจริงๆแล้ว ให้ใส่ค่าเป็น null\n\nรายการชื่อธนาคารที่ต้องใช้: KTB (กรุงไทย, Krungthai), KBank (กสิกร, กสิกรไทย, KBank), BBL (ธนาคารกรุงเทพ, Bangkok Bank), MyMo (ออมสิน), SCB (ธนาคารไทยพาณิชย์, ไทยพาณิชย์), PromptPay (พร้อมเพย์), MAKEbyKBank (makebyKbank, MAKE, Make,MakebyKbank)\n\n- \"จำนวนเงิน\" ต้องเป็นตัวเลขทศนิยมสองตำแหน่ง และถ้าสลิปเป็นสกุลเงินอื่น ให้ระบุสกุลเงินนั้นด้วย และถ้าเป็นสกุลเงินต่างประเทศ ให้ระบุสกุลเงินด้วย เช่น \"4836.00 JPY\"  \n- ถ้ามีข้อความในภาษาจีนหรือญี่ปุ่นภาษอังกฤษ ให้แปลเป็นไทยในวงเล็บหลังข้อความต้นฉบับ เช่น `\"AEON SAPPOROSOEN, HOKKAIDO (อิออน ซัปโปโรโซเอ็น, ฮอกไกโด) หรืออื่นๆ เช่น FOBIESIM, SHIBUYA-KU\"`  \n- \"วันเวลา ที่ทำรายการ\" ให้สกัดทั้งวันที่และเวลา\n-\"ให้แยก 'จำนวนเงิน' และ 'สกุลเงิน' ออกเป็นคนละฟิลด์เสมอ ถ้าไม่พบสกุลเงิน ให้ใส่ค่าเป็น 'THB'\"  \n\nตัวอย่าง JSON\n\n{\n  \"ชื่อผู้โอน\": \"AEON SAPPOROSOEN, HOKKAIDO\",\n  \"จำนวนเงิน\": \"4836.00\",\n  \"สกุลเงิน\": \"JPY\",\n  \"วันเวลา ที่ทำรายการ\": \"03 Jun 2025, 08:05PM\",\n  ...\n}\n\n\n- **สำคัญ: สำหรับ \"ชื่อผู้โอน\" และ \"ชื่อผู้รับ\" หากชื่อในสลิปซ้ำกัน ให้ดึงชื่อตามที่ระบุในสลิปจริง โดยใช้ตำแหน่งของหัวข้อ \"จาก\" เพื่อระบุชื่อผู้โอน และหัวข้อ \"ไปยัง\" เพื่อระบุชื่อผู้รับอย่างเคร่งครัด ให้ดึงชื่อตามที่ปรากฏในสลิปจริง โดยไม่สรุปหรือแก้ไข**\n\n- **ให้ข้อมูลดิบที่สุดเท่าที่จะเป็นไปได้ โดยเน้นความแม่นยำของตัวอักษรและตัวเลขเป็นหลัก**\n- ห้ามเพิ่มข้อความ คำอธิบาย หรือสัญลักษณ์ใดๆ นอกเหนือจาก JSON Object\n\nตัวอย่าง JSON Output ที่คาดหวัง:\n{\n  \"ชื่อผู้โอน\": \"สมชาย ใจดี\",\n  \"ชื่อผู้รับ\": \"TICKETIER\",\n  \"จำนวนเงิน\": \"500.00\",\n  \"วันเวลา ที่ทำรายการ\": \"11/07/2568 12:38\",\n  \"เลขอ้างอิง\": \"64C90NJA9OKH4AY90RV\",\n  \"บันทึกช่วยจำ\": null,\n  \"จากธนาคาร\": \"SCB\",\n \n}\n\n\n\nสกัดข้อมูลจากข้อความดิบนี้และส่งกลับมาในรูปแบบ JSON ตามตัวอย่างเท่านั้น:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -7168,
        -1104
      ],
      "id": "04704f74-aa58-4e9e-b94e-0a6f04933a5b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -7216,
        -912
      ],
      "id": "0f06a800-77ba-4514-86e4-c4bc7f67ad3d",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9rCGzNq8kpxIepft",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "="
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -7072,
        -896
      ],
      "id": "ead66f33-99b3-4db4-aa1f-8204cea39405",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "96551dd0-14a0-40d2-b770-5d11e615ef60",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "=ธนาคารกรุงเทพ",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "09233987-8a86-44fd-b636-e89b1004ca0d",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "ธนาคารกรุงไทย",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "95fbd385-ac99-4290-8b59-cf540da9c7af",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "KBank",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "51fa73bb-8b00-4255-9db0-5d778890ed45",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "ธนาคารไทยพาณิชย์ ",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "a40dccd7-b358-4bdd-bbcd-f35a905e59d6",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "ธนาคารออมสิน",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "3d9fc9a7-d284-4cb4-9471-bf2b4dddbe8b",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "SCB",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6f0ead75-82cf-4250-bbe0-801b12874b30",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "KTB",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "d6c85175-7846-40c2-89c2-95b3dea0c9fa",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "MyMo",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "2c88d64a-61b6-4a75-a4c6-07ddb0f83d3e",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "BBL",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "f799b96f-c936-4377-b039-c163a8a82f56",
              "leftValue": "={{ $json['จากธนาคาร'] }}",
              "rightValue": "MAKEbyKBank",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -6736,
        -1504
      ],
      "id": "528f3dca-dbfb-437a-974f-08b5c2f615da",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// ดึงค่า output ที่เป็น String จาก AI Agent\nconst aiOutputString = $json.output;\n\n// ลบข้อความที่ไม่จำเป็นออก (เช่น ```json\\n และ ```)\nlet cleanedString = aiOutputString.replace(/```json\\n|```/g, '');\n\n// แปลง String ที่สะอาดแล้วให้เป็น JSON Object\nlet parsedData = {};\ntry {\n  parsedData = JSON.parse(cleanedString);\n} catch (e) {\n  // หากเกิดข้อผิดพลาดในการแปลง JSON ให้ส่งค่า Error แทน\n  return { error: \"ไม่สามารถแปลงข้อมูลจาก AI Agent ได้\" };\n}\n\n// ส่งคืน JSON Object ที่ถูกต้อง\nreturn [parsedData];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6736,
        -1088
      ],
      "id": "8229dd70-3c97-42cc-b7ca-1486de2fe947",
      "name": "JS-AI"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📫ทำรายการบันทึก เสร็จเรียบร้อยค่ะ🏜️\n🧑‍🚀ชื่อผู้โอน :{{ $json.items[0]['ชื่อผู้โอน'] }}\n🏋️ชื่อผู้รับ :{{ $json.items[0]['ชื่อผู้รับ'] }}\n💰จำนวนเงิน :{{ $json.items[0]['จำนวนเงิน'] }} บาท\n⏰วันเวลา ที่ทำรายการ :{{ $json.items[0]['วันเวลา ที่ทำรายการ'] }}\n🍓🥑🍇🏓🏆✨🏇🤶🏜️🌊🪬🩺💰🪙☎️🗝️🪒🪭🧣🖍️🫧🧽🪥\n🥽บันทึกช่วยจำ :{{ $json.items[0]['บันทึกช่วยจำ'] }}\n🌈จากธนาคาร :{{ $json.items[0]['จากธนาคาร'] }}\n🌽รหัสอ้างอิง :{{ $json.items[0]['เลขอ้างอิง'] }}\n💯💗❤️🩷🧡💛💚💙🩵💜🤎🖤🩶🤍💯",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4032,
        -1776
      ],
      "id": "e995f047-9824-4c73-88af-b48eb398b8c1",
      "name": "SAVE",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Loop Over Items').item.json.chatId }}",
        "text": "\"มีสลิปจากการทำธุรกรรมต่างประเทศจ้า\"",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5840,
        -1168
      ],
      "id": "c81409be-d8bb-4237-a42c-a675ee6df534",
      "name": "exchanges",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "KTB",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "359c0581-9e57-43aa-ad94-e8c0ae2cc5b6"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4efbb30f-5042-4772-8de1-09d248599736",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "MAKEbyKBank",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "238333ae-2760-4c1a-a814-9f2e519af922",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "SCB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "47492068-6d41-4c0d-9879-eb3dff3911e9",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "BBL",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8289ec14-6337-4303-8e8b-3cec224727e5",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "MyMo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9bcc8619-8565-41f7-8aec-b107eba46597",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": " KBank",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -6176,
        -1808
      ],
      "id": "10330edf-44bf-45b4-8f66-2cf513bc1f0c",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 380061002,
          "mode": "list",
          "cachedResultName": "MAKEbyKbank",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=380061002"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "={{ $json['เลขอ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "บันทึกช่วยจำ": "={{ $json['บันทึกช่วยจำ'] }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5456,
        -1984
      ],
      "id": "8836a49f-bd52-4d52-bf76-d1e5d9fbeec2",
      "name": "MAKE",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "KTB",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "={{ $json['เลขอ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json.raw_parsed['วันที่ทำรายการ'] }}",
            "บันทึกช่วยจำ": "={{ $json['บันทึกช่วยจำ'] }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5472,
        -2192
      ],
      "id": "5f8b8e7f-1306-4cd4-a9a6-5a2b78d1fcc7",
      "name": "KTB",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 160558656,
          "mode": "list",
          "cachedResultName": "SCB",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=160558656"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขที่บัญชี",
              "displayName": "เลขที่บัญชี",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "raw_parsed",
              "displayName": "raw_parsed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "raw_text",
              "displayName": "raw_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "confidence_score",
              "displayName": "confidence_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5456,
        -1792
      ],
      "id": "1ef0415e-56e2-4184-a887-e4a93a009fe7",
      "name": "SCB",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1334248226,
          "mode": "list",
          "cachedResultName": "BBL",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1334248226"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "{{ $json['เลขอ้างอิง'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5456,
        -1600
      ],
      "id": "cd57458c-5447-4743-827f-924d6d811b51",
      "name": "BBL",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 913554616,
          "mode": "list",
          "cachedResultName": "MyMo",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=913554616"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "={{ $json['เลขอ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "บันทึกช่วยจำ": "={{ $json['บันทึกช่วยจำ'] }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5456,
        -1408
      ],
      "id": "2bf44bb4-01f0-473e-b850-b10fd8fa02d6",
      "name": "MyMo",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Node: bigestF (FIXED FOR BATCHING v2)\n// ✅ รองรับ media_group (หลายรูปต่อครั้ง) และ single upload\n// ✅ สร้าง batchKey ที่เหมาะสม และเพิ่ม timestamp ป้องกัน collision\n\nconst msg = $json.message || $json;\nconst items = [];\nconst chatId = msg.chat?.id || null;\nconst mediaGroupId = msg.media_group_id || null;\nconst timestamp = msg.date || Date.now(); // ป้องกันชนกันระหว่าง batch ซ้ำเวลาเดียวกัน\n\n// 💡 ใช้ batchKey เพื่อ group รูป slip ที่มาพร้อมกัน\nconst batchKey = mediaGroupId\n  ? `group_${chatId}_${mediaGroupId}`\n  : `single_${chatId}_${timestamp}`;\n\n// --- Handle case: photo (1 รูปหรือหลายรูปใน media group) ---\nif (msg.photo && Array.isArray(msg.photo) && msg.photo.length) {\n  // Telegram ส่งรูปหลายขนาด -> ใช้ขนาดใหญ่สุด (อันสุดท้าย)\n  const largestPhoto = msg.photo[msg.photo.length - 1];\n  items.push({\n    json: {\n      type: \"slip\",\n      fileId: largestPhoto.file_id,\n      chatId,\n      media_group_id: mediaGroupId,\n      batchKey, // ใช้ในการรวม batch ภายหลัง\n    },\n  });\n}\n\n// --- Handle case: document (เช่น PDF หรือ slip แนบเป็นไฟล์) ---\nelse if (msg.document) {\n  const ext = msg.document.mime_type || \"\";\n  items.push({\n    json: {\n      type: ext.includes(\"pdf\") ? \"statement\" : \"document\",\n      fileId: msg.document.file_id,\n      chatId,\n      media_group_id: mediaGroupId,\n      batchKey,\n    },\n  });\n}\n\n// --- กรณีไม่พบไฟล์เลย ---\nelse {\n  items.push({\n    json: { error: \"No file found\", chatId },\n  });\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10512,
        -960
      ],
      "id": "0dbe9a8d-38ab-495f-a2fc-cfaba3178f74",
      "name": "bigestF"
    },
    {
      "parameters": {
        "jsCode": "// ParseSlip - ULTIMATE Consolidated (n8n Function node) - Execute Once\n// Banks supported: KTB, KBank, MAKEbyKBank, BBL, MyMo, SCB, PromptPay\n\n// ---------------- Helpers ----------------\nfunction thaiDigitsToLatin(s) {\n  if (s === null || s === undefined) return s;\n  const map = {'๐':'0','๑':'1','๒':'2','๓':'3','๔':'4','๕':'5','๖':'6','๗':'7','๘':'8','๙':'9'};\n  return String(s).replace(/[๐-๙]/g, ch => map[ch] || ch);\n}\n\nfunction normalizeAmount(s) {\n  if (s === null || s === undefined) return null;\n  let t = String(s).trim();\n  t = thaiDigitsToLatin(t);\n  t = t.replace(/[^\\d\\.,\\-\\(\\)]/g, '');\n  let negative = false;\n  if (/^\\(.*\\)$/.test(t)) { negative = true; t = t.replace(/^\\(|\\)$/g,''); }\n  if (/^-/.test(t)) { negative = true; t = t.replace(/^-/, ''); }\n\n  if (t.indexOf('.') !== -1 && t.indexOf(',') !== -1) {\n    if (t.lastIndexOf(',') > t.lastIndexOf('.')) {\n      t = t.replace(/\\./g, '').replace(',', '.');\n    } else {\n      t = t.replace(/,/g, '');\n    }\n  } else if (t.indexOf(',') !== -1 && t.indexOf('.') === -1) {\n    const parts = t.split(',');\n    const last = parts[parts.length - 1];\n    if (last.length === 2) t = t.replace(/,/g, '.');\n    else t = t.replace(/,/g, '');\n  } else {\n    t = t.replace(/,/g, '');\n  }\n\n  t = t.replace(/[^\\d.]/g, '');\n  if (t === '') return null;\n  const num = parseFloat(t);\n  if (isNaN(num)) return null;\n  return (negative ? -num : num).toFixed(2);\n}\n\nfunction normalizeDateRaw(s) {\n  if (!s) return null;\n  let str = String(s).trim();\n  str = thaiDigitsToLatin(str);\n  str = str.replace(/\\s*น\\.?$/i, '').trim();\n\n  // ISO-ish\n  let m = str.match(/(20\\d{2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})(?:[ T](\\d{1,2}:\\d{2}(?::\\d{2})?))?/);\n  if (m) {\n    const y = m[1], mo = String(m[2]).padStart(2,'0'), d = String(m[3]).padStart(2,'0');\n    let time = m[4] || '00:00:00'; if (time.length === 5) time += ':00';\n    return y + '-' + mo + '-' + d + ' ' + time;\n  }\n\n  // dd/mm/yyyy hh:mm\n  m = str.match(/(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})\\s+(\\d{1,2}:\\d{2}(?::\\d{2})?)/);\n  if (m) {\n    const parts = m[1].split('/');\n    let d = parts[0].padStart(2,'0'), mo = parts[1].padStart(2,'0'), y = parts[2];\n    if (y.length === 2) {\n      const be = 2500 + parseInt(y,10);\n      y = String(be - 543);\n    } else if (parseInt(y,10) > 2500) {\n      y = String(parseInt(y,10) - 543);\n    }\n    let time = m[2]; if (time.length === 5) time += ':00';\n    return y + '-' + mo + '-' + d + ' ' + time;\n  }\n\n  // Thai month names\n  const thaiMonths = {\n    'ม.ค':'01','มค':'01','ม.ค.':'01',\n    'ก.พ':'02','กพ':'02','ก.พ.':'02',\n    'มี.ค':'03','มีค':'03','มี.ค.':'03',\n    'เม.ย':'04','เมย':'04','เมย.':'04',\n    'พ.ค':'05','พค':'05','พ.ค.':'05',\n    'มิ.ย':'06','มิย':'06','มิ.ย.':'06',\n    'ก.ค':'07','กค':'07','ก.ค.':'07',\n    'ส.ค':'08','สค':'08','ส.ค.':'08',\n    'ก.ย':'09','กย':'09','ก.ย.':'09',\n    'ต.ค':'10','ตค':'10','ต.ค.':'10',\n    'พ.ย':'11','พย':'11','พ.ย.':'11',\n    'ธ.ค':'12','ธค':'12','ธ.ค.':'12'\n  };\n\n  m = str.match(/(\\d{1,2})\\s*([ก-ฮ\\.]{1,6})\\s*(\\d{2,4})\\s*(?:[-,–]\\s*)?(\\d{1,2}:\\d{2}(?::\\d{2})?)?/i);\n  if (m) {\n    const day = String(m[1]).padStart(2,'0');\n    let monRaw = m[2].replace(/\\./g,'');\n    let month = null;\n    for (const k of Object.keys(thaiMonths)) {\n      const keyMatch = k.replace(/\\./g,'');\n      if (monRaw === keyMatch) { month = thaiMonths[k]; break; }\n    }\n    if (!month) {\n      for (const k of Object.keys(thaiMonths)) {\n        const keyMatch = k.replace(/\\./g,'');\n        if (monRaw.startsWith(keyMatch) || keyMatch.startsWith(monRaw)) { month = thaiMonths[k]; break; }\n      }\n    }\n    let yearRaw = m[3];\n    let yearNum = parseInt(yearRaw,10);\n    if (yearRaw.length === 2) {\n      const be = 2500 + yearNum;\n      yearNum = be - 543;\n    } else if (yearNum > 2500) {\n      yearNum = yearNum - 543;\n    }\n    const timeRaw = m[4];\n    let time = '00:00:00';\n    if (timeRaw) time = timeRaw.length === 5 ? timeRaw + ':00' : timeRaw;\n    if (month) return String(yearNum) + '-' + month + '-' + day + ' ' + time;\n  }\n\n  const ts = Date.parse(str);\n  if (!isNaN(ts)) return new Date(ts).toISOString().replace('T',' ').slice(0,19);\n  return null;\n}\n\n// ---------- line helpers & heuristics ----------\nfunction splitLines(raw) {\n  if (!raw) return [];\n  return raw.split(/\\r?\\n/).map(l => l.trim()).filter(l => l.length > 0);\n}\nfunction isDateLine(line) {\n  return /\\d{1,2}\\s*[ก-ฮ\\.]{1,6}\\s*\\d{2,4}/.test(line) || /\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}/.test(line) || /\\d{4}\\-\\d{2}\\-\\d{2}/.test(line);\n}\nfunction isAmountLine(line) {\n  return /([\\d\\.,]+\\.\\d{2})/.test(line);\n}\nfunction isAccountLine(line) {\n  return /(?:\\d{2,4}[x\\*\\-]{2,}\\d{2,6})|(?:\\d[\\d\\-\\s]{5,})/.test(line);\n}\nfunction isMerchantLine(line) {\n  return /(บริษัท|หอพัก|ร้าน|SHOP|คอร์ปอเรชั่น|คอร์ป|บิลเลอร์|Biller|ร้านค้า|ปิโตรเลียม|ปิโตร|GAS|STATION|PAY|TOPUP|เติมเงิน|ปั๊ม|ปิโตร)/i.test(line);\n}\nfunction isPersonLine(line) {\n  return /^(นาย|นางสาว|น.ส\\.|น.ส|นาง|ดร\\.|ผศ\\.|รศ\\.)/i.test(line) || (/[ก-ฮ]{2,}\\s[ก-ฮ]{2,}/.test(line) && !isMerchantLine(line) && !isAccountLine(line));\n}\nfunction noiseLine(line) {\n  return /^(mo|mymo|no|mm|nymo|momm|m|my|qr code|qr|scb|krungthai|กรุงไทย|จำนวน|รหัส|หมายเลข|ค่าธรรมเนียม|รายการ|EDC|K\\+|Kplus)/i.test(line);\n}\n\nfunction findNearestNameLine(lines, startIdx, direction = 1) {\n  let idx = startIdx;\n  while (idx >= 0 && idx < lines.length) {\n    const l = lines[idx].trim();\n    if (!noiseLine(l) && !isDateLine(l) && !isAmountLine(l) && l.length > 1) {\n      return l;\n    }\n    idx += direction;\n  }\n  return null;\n}\n\n// Extract sender/receiver with improved heuristics\nfunction extractNamesFromRaw(raw) {\n  const lines = splitLines(raw);\n  if (lines.length === 0) return {sender: null, receiver: null};\n\n  let sender = null, receiver = null;\n\n  // arrow / separator\n  const arrowIdx = lines.findIndex(l => l.trim() === '↓' || l.includes('->') || l.includes('v'));\n  if (arrowIdx > -1) {\n    sender = findNearestNameLine(lines, arrowIdx - 1, -1);\n    receiver = findNearestNameLine(lines, arrowIdx + 1, 1);\n    if (sender && receiver) return {sender, receiver};\n  }\n\n  // keyword logic\n  for (let i = 0; i < lines.length; i++) {\n    const L = lines[i];\n    if (!sender && (/^(?:จาก|From)[:\\s]*$/i.test(L) || /^จาก\\s+/i.test(L))) {\n      sender = findNearestNameLine(lines, i + 1, 1) || findNearestNameLine(lines, i - 1, -1);\n    }\n    if (!receiver && (/^(?:ไปยัง|ถึง|To|ผู้รับ)[:\\s]*$/i.test(L) || /^(?:ไปยัง|ถึง|To)\\s+/i.test(L))) {\n      receiver = findNearestNameLine(lines, i + 1, 1) || findNearestNameLine(lines, i - 1, -1);\n    }\n  }\n\n  // merchant vs person heuristic\n  let merchant = null;\n  let person = null;\n  for (let i = 0; i < lines.length; i++) {\n    const L = lines[i];\n    if (!merchant && isMerchantLine(L)) merchant = L;\n    if (!person && isPersonLine(L)) person = L;\n  }\n\n  if (merchant && person) {\n    if (!sender) sender = person;\n    if (!receiver) receiver = merchant;\n  } else {\n    if (!sender && person) sender = person;\n    if (!receiver && merchant) receiver = merchant;\n  }\n\n  // fallback to first two meaningful lines\n  if (!sender && !receiver) {\n    const meaningful = lines.filter(l => !noiseLine(l) && l.length > 1);\n    sender = meaningful[0] || null;\n    receiver = meaningful[1] || null;\n  }\n\n  return {sender, receiver};\n}\n\n// ---------------- Bank detection ----------------\nfunction detectBankName(text) {\n  if (!text) return 'generic';\n  const low = text.toLowerCase();\n  const bankKeywords = {\n    'KTB': ['krungthai','กรุงไทย','ktb','krung thai'],\n    'KBank': ['กสิกร','kbank','k plus','k+','kplus'],\n    'MAKEbyKBank': ['make by kbank','makebykbank','make'],\n    'BBL': ['bangkok bank','กรุงเทพ','bbl','กรุงเทพ'],\n    'MyMo': ['mymo','ออมสิน','mymo gsb','by gsb'],\n    'SCB': ['scb','ไทยพาณิชย์','scb *'],\n    'PromptPay': ['promptpay','พร้อมเพย์','รหัสพร้อมเพย์','prompt pay']\n  };\n  for (const [code, kws] of Object.entries(bankKeywords)) {\n    for (const kw of kws) if (low.includes(kw)) return code;\n  }\n  if (/(ธนาคาร|bank)/i.test(low)) {\n    if (low.includes('กรุง')) return 'KTB';\n    if (low.includes('กรุงเทพ') || low.includes('bbl')) return 'BBL';\n    if (low.includes('ไทยพาณิชย์') || low.includes('scb')) return 'SCB';\n  }\n  return 'generic';\n}\n\n// ---------------- Parsers per bank ----------------\nfunction findExtraCodes(text) {\n  const codes = {};\n  const regex = /(รหัสการอนุมัติ|หมายเลขคู่ค้า|Biller ID|รหัสร้านค้า|รหัสอ้างอิงร้านค้า|รหัสร้านค้า)[:\\s]*([A-Za-z0-9\\-]+)/gi;\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    codes[match[1].replace(/\\s+/g,'')] = match[2];\n  }\n  return codes;\n}\n\nfunction parseKtb(text) {\n  if (!text) return {};\n  const refMatch = text.match(/(?:รหัส\\s*(?:อ้างอิง|จอง|รายการ)?[:\\s]*)([A-Za-z0-9\\-]+)/i) || text.match(/\\b(mKTB[0-9A-Za-z\\-]{6,})\\b/i);\n  const amountMatch = text.match(/(?:จำนวน(?:เงิน)?[:\\s]*\\n?\\s*|ยอดเงิน[:\\s]*)([\\d\\.,]+\\.\\d{2})/i) || text.match(/([\\d\\.,]+\\.\\d{2})\\s*บาท/i);\n  const dateMatch = text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}\\s*[-–]?\\s*\\d{1,2}:\\d{2})/i) || text.match(/(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}\\s+\\d{1,2}:\\d{2})/i);\n  const {sender, receiver} = extractNamesFromRaw(text);\n  const senderAccMatch = text.match(/จาก[\\s\\S]{0,60}?([0-9Xx\\*\\-]{4,24})/i);\n  const receiverAccMatch = text.match(/(?:ไปยัง|ถึง|ผู้รับ)[\\s\\S]{0,60}?([0-9Xx\\*\\-]{4,24})/i);\n\n  return {\n    'จากธนาคาร': 'KTB',\n    'รหัสอ้างอิง': refMatch ? refMatch[1].trim() : null,\n    'ชื่อผู้โอน': sender || null,\n    'เลขที่ผู้โอน': senderAccMatch ? senderAccMatch[1].replace(/[\\s\\-]/g,'') : null,\n    'ชื่อผู้รับ': receiver || null,\n    'เลขที่ผู้รับ': receiverAccMatch ? receiverAccMatch[1].replace(/[\\s\\-]/g,'') : null,\n    'จำนวนเงิน': amountMatch ? amountMatch[1].replace(/[^\\d.]/g,'') : null,\n    'วันที่ทำรายการ': dateMatch ? dateMatch[1].trim() : null,\n    'บันทึกช่วยจำ': (text.match(/บันทึกช่วยจำ[:\\s]*([^\\n\\r]+)/i) || [null, null])[1] || null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parseKBankSlip(text) {\n  const {sender, receiver} = extractNamesFromRaw(text);\n  const reference = text.match(/(?:เลขที่รายการ|รหัสอ้างอิง|Ref(?:erence)?)[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || null;\n  const amount = text.match(/(?:จำนวน(?:เงิน)?|Amount|ยอดเงิน)[:\\s]*\\n?\\s*([\\d,]+\\.\\d{2})/i)?.[1] || text.match(/([\\d\\.,]+\\.\\d{2})\\s*บาท/i)?.[1] || null;\n  const date = text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}\\s*\\d{1,2}:\\d{2})/i)?.[1] || null;\n  return {\n    'จากธนาคาร': 'KBank',\n    'รหัสอ้างอิง': reference,\n    'ชื่อผู้โอน': sender || null,\n    'ชื่อผู้รับ': receiver || null,\n    'จำนวนเงิน': amount,\n    'วันที่ทำรายการ': date,\n    'บันทึกช่วยจำ': (text.match(/บันทึกช่วยจำ[:\\s]*([^\\n\\r]+)/i)||[null,null])[1] || null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parseMAKE(text) { return parseKBankSlip(text); }\n\nfunction parseBBL(text) {\n  const {sender, receiver} = extractNamesFromRaw(text);\n  return {\n    'จากธนาคาร': 'BBL',\n    'รหัสอ้างอิง': text.match(/(?:หมายเลขที่อ้างอิง|รหัสอ้างอิง|reference)[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || null,\n    'ชื่อผู้โอน': sender || null,\n    'ชื่อผู้รับ': receiver || null,\n    'จำนวนเงิน': text.match(/(?:จำนวนเงิน|ยอดเงิน|Amount)[:\\s]*\\n?\\s*([\\d,]+\\.\\d{2})/i)?.[1] || null,\n    'วันที่ทำรายการ': text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}.*\\d{1,2}:\\d{2})/i)?.[1] || null,\n    'บันทึกช่วยจำ': (text.match(/บันทึก[:\\s]*([^\\n\\r]+)/i)||[null,null])[1] || null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parseMyMo(text) {\n  const lines = splitLines(text);\n  const { sender, receiver } = extractNamesFromRaw(text);\n  const refMatch = text.match(/รหัสอ้างอิง[:\\s]*([A-Za-z0-9\\-]+)/i);\n  const dateMatch = text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}\\s*\\d{1,2}:\\d{2})/i) || text.match(/(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}\\s+\\d{1,2}:\\d{2})/i);\n\n  // amount heuristics\n  let amount = null;\n  for (let i = 0; i < lines.length; i++) {\n    if (/จำนวน(?:เงิน)?/i.test(lines[i]) && i+1 < lines.length && /[\\d\\.,]+\\.\\d{2}/.test(lines[i+1])) {\n      amount = lines[i+1].match(/([\\d\\.,]+\\.\\d{2})/)[1]; break;\n    }\n    const am = lines[i].match(/([\\d\\.,]+\\.\\d{2})/);\n    if (am) { amount = am[1]; break; }\n  }\n\n  const accMatch = text.match(/([0-9]{2,4}[x\\*X\\-]{2,}[0-9]{2,6})/i);\n  let finalSender = sender;\n  let finalReceiver = receiver;\n\n  // cleanup noisy tokens\n  const invalidWord = /^(จาก|ถึง|รายการ|จำนวน|จํานวน|รายการเติมเงิน|mm|mo|my|mymo)$/i;\n  if (finalSender && invalidWord.test(finalSender)) finalSender = null;\n  if (finalReceiver && invalidWord.test(finalReceiver)) finalReceiver = null;\n\n  if (!finalSender) {\n    const matchPerson = text.match(/(นาย|นางสาว|น.ส\\.|น.ส|นาง)\\s+[ก-ฮ]+\\s+[ก-ฮ]+/);\n    if (matchPerson) finalSender = matchPerson[0];\n  }\n  if (!finalReceiver) {\n    const matchReceiverLine = text.match(/(นาย|นางสาว|น.ส\\.|น.ส|นาง)\\s+[ก-ฮ]+\\s+[ก-ฮ]+.*?(พร้อมเพย์|เติมเงิน|Biller|ร้านค้า|PAY)/i);\n    if (matchReceiverLine) finalReceiver = matchReceiverLine[0];\n    else {\n      const m = text.match(/(พร้อมเพย์|เติมเงิน|Biller|ร้านค้า|PAY)/i);\n      if (m) finalReceiver = m[1];\n    }\n  }\n\n  // merge lines when needed\n  if (finalReceiver && /^เติมเงิน|พร้อมเพย์|Biller|ร้านค้า|PAY/i.test(finalReceiver.trim())) {\n    const idx = lines.findIndex(l => l.includes(finalReceiver.trim()));\n    if (idx > 0) {\n      const prev = lines[idx-1];\n      if (/^(นาย|นางสาว|น.ส\\.|น.ส|นาง)/.test(prev) || isPersonLine(prev)) finalReceiver = `${prev} ${finalReceiver}`.trim();\n    }\n  }\n\n  return {\n    'จากธนาคาร': 'MyMo',\n    'รหัสอ้างอิง': refMatch ? refMatch[1] : null,\n    'ชื่อผู้โอน': finalSender || null,\n    'ชื่อผู้รับ': finalReceiver || null,\n    'จำนวนเงิน': amount || null,\n    'วันที่ทำรายการ': dateMatch ? dateMatch[1] : null,\n    'บันทึกช่วยจำ': (text.match(/บันทึกช่วยจำ[:\\s]*([^\\n\\r]+)/i) || [null, null])[1] || null,\n    'เลขที่บัญชี': accMatch ? accMatch[0].replace(/[\\s\\-]/g,'') : null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parseSCB(text) {\n  const {sender, receiver} = extractNamesFromRaw(text);\n  return {\n    'จากธนาคาร': 'SCB',\n    'รหัสอ้างอิง': text.match(/รหัสอ้างอิง[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || null,\n    'ชื่อผู้โอน': sender || null,\n    'ชื่อผู้รับ': receiver || text.match(/ไปยัง[:\\s]*\\n?\\s*([^\\n\\r]+)/i)?.[1] || null,\n    'จำนวนเงิน': text.match(/(?:จำนวน(?:เงิน)?|ยอดเงิน|Amount)[:\\s]*\\n?\\s*([\\d,]+\\.\\d{2})/i)?.[1] || text.match(/([\\d\\.,]+\\.\\d{2})\\s*บาท/i)?.[1] || null,\n    'วันที่ทำรายการ': text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}.*\\d{1,2}:\\d{2})/i)?.[1] || null,\n    'บันทึกช่วยจำ': null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parsePromptPay(text) {\n  const {sender, receiver} = extractNamesFromRaw(text);\n  return {\n    'จากธนาคาร': 'PromptPay',\n    'รหัสอ้างอิง': text.match(/Ref\\.?[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || text.match(/เลขที่รายการ[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || null,\n    'ชื่อผู้โอน': sender || null,\n    'ชื่อผู้รับ': receiver || null,\n    'จำนวนเงิน': text.match(/(?:จำนวน(?:เงิน)?|Amount|ยอดเงิน)[:\\s]*\\n?\\s*([\\d,]+\\.\\d{2})/i)?.[1] || text.match(/([\\d\\.,]+\\.\\d{2})\\s*บาท/i)?.[1] || null,\n    'วันที่ทำรายการ': (function(){ const d = text.match(/วันที่\\s*(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})\\s*เวลา\\s*(\\d{1,2}:\\d{2})/i); return d ? (d[1] + ' ' + d[2]) : (text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}\\s*\\d{1,2}:\\d{2})/i)?.[1] || null); })(),\n    'บันทึกช่วยจำ': (text.match(/บันทึกช่วยจำ[:\\s]*([^\\n\\r]+)/i)||[null,null])[1] || null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\nfunction parseGeneric(text) {\n  const {sender, receiver} = extractNamesFromRaw(text);\n  return {\n    'จากธนาคาร': null,\n    'รหัสอ้างอิง': text.match(/(?:รหัสอ้างอิง|Ref(?:erence)?|เลขที่รายการ|Transaction ID)[:\\s]*([A-Za-z0-9\\-]+)/i)?.[1] || null,\n    'ชื่อผู้โอน': sender || text.match(/(?:จาก|From)[:\\s]*\\n?\\s*([^\\n\\r]+)/i)?.[1] || null,\n    'ชื่อผู้รับ': receiver || text.match(/(?:ไปยัง|To|ถึง)[:\\s]*\\n?\\s*([^\\n\\r]+)/i)?.[1] || null,\n    'จำนวนเงิน': text.match(/(?:จำนวน(?:เงิน)?|ยอดเงิน|Amount|จำนวน)[:\\s]*\\n?\\s*([\\d,]+\\.\\d{2})/i)?.[1] || text.match(/([\\d\\.,]+\\.\\d{2})\\s*บาท/i)?.[1] || null,\n    'วันที่ทำรายการ': text.match(/(\\d{1,2}\\s*[ก-ฮ.]+\\s*\\d{2,4}.*\\d{1,2}:\\d{2})/i)?.[1] || null,\n    'บันทึกช่วยจำ': (text.match(/บันทึกช่วยจำ[:\\s]*([^\\n\\r]+)/i)||[null,null])[1] || null,\n    'other_codes': findExtraCodes(text)\n  };\n}\n\n// ---------------- Normalize keys + scoring ----------------\nfunction extractAccountNumber(rawText) {\n  if (!rawText) return null;\n  let m = String(rawText).match(/([0-9]{2,4}[xX\\*\\-]{2,}[0-9]{2,6})/);\n  if (m && m[0]) return m[0].replace(/[\\s\\-]/g,'');\n  return null;\n}\n\nfunction normalizeKeys(parsedDoc, rawText, bankDetected) {\n  const doc = parsedDoc || {};\n  const normalized = {\n    \"เลขอ้างอิง\": doc['รหัสอ้างอิง'] || doc['เลขที่รายการ'] || doc['reference'] || null,\n    \"เลขที่บัญชี\": doc['เลขที่บัญชี'] || doc['เลขที่ผู้รับ'] || doc['account_number'] || extractAccountNumber(rawText) || null,\n    \"เลขที่บัญชีผู้โอน\": doc['เลขที่ผู้โอน'] || null,\n    \"เลขที่บัญชีผู้รับ\": doc['เลขที่ผู้รับ'] || null,\n    \"ชื่อผู้โอน\": (doc['ชื่อผู้โอน']||doc['from']||null),\n    \"ชื่อผู้รับ\": (doc['ชื่อผู้รับ']||doc['to']||null),\n    \"จำนวนเงิน\": normalizeAmount(doc['จำนวนเงิน'] || doc['amount'] || doc['จำนวน'] || null),\n    \"วันเวลา ที่ทำรายการ\": (function(){\n      const d = normalizeDateRaw(doc['วันที่ทำรายการ'] || doc['วันเวลา'] || doc['date'] || null);\n      if (d) return d;\n      const d2 = normalizeDateRaw(rawText);\n      return d2 || null;\n    })(),\n    \"บันทึกช่วยจำ\": doc['บันทึกช่วยจำ'] || doc['memo'] || null,\n    \"จากธนาคาร\": doc['จากธนาคาร'] || bankDetected || null,\n    \"other_codes\": doc['other_codes'] || findExtraCodes(rawText),\n    \"raw_parsed\": doc,\n    \"raw_text\": rawText || null\n  };\n\n  let score = 0;\n  if (normalized['จำนวนเงิน']) score += 1.5;\n  if (normalized['วันเวลา ที่ทำรายการ']) score += 1.5;\n  if (normalized['เลขอ้างอิง']) score += 1;\n  if (normalized['จากธนาคาร']) score += 0.5;\n  if (normalized['ชื่อผู้โอน']) score += 0.5;\n  if (normalized['ชื่อผู้รับ']) score += 0.5;\n  if (normalized['เลขที่บัญชี']) score += 0.5;\n\n  normalized['confidence_score'] = Math.min(1, score / 6.0);\n  normalized['low_confidence'] = normalized['confidence_score'] < 0.75;\n\n  return normalized;\n}\n\n// ---------------- Main ----------------\nconst outputs = [];\ntry {\n  // get items (n8n provides items array)\n  if (!items || !items.length) {\n    return [{ json: { error: \"no input items\" } }];\n  }\n\n  // Mode A: single item contains array of responses (batch upload)\n  if (items.length === 1 && items[0].json && Array.isArray(items[0].json.responses)) {\n    const respArr = items[0].json.responses || [];\n    const origArr = items[0].json.originals || [];\n    const expected = Math.max(origArr.length || 0, respArr.length || 0);\n    const perSlipOutputs = [];\n\n    for (let i = 0; i < expected; i++) {\n      const r = respArr[i] || null;\n      let raw = \"\";\n      let errorNote = null;\n      if (!r) { errorNote = 'missing_response'; }\n      if (r && r.error) { errorNote = typeof r.error === 'string' ? r.error : JSON.stringify(r.error); }\n      if (r) {\n        if (r.textAnnotations && r.textAnnotations[0] && r.textAnnotations[0].description) raw = String(r.textAnnotations[0].description).trim();\n        else if (r.fullTextAnnotation && r.fullTextAnnotation.text) raw = String(r.fullTextAnnotation.text).trim();\n        else raw = JSON.stringify(r);\n      }\n\n      const bank = detectBankName(raw);\n      let parsed;\n      switch(bank) {\n        case 'KTB': parsed = parseKtb(raw); break;\n        case 'KBank': parsed = parseKBankSlip(raw); break;\n        case 'MAKEbyKBank': parsed = parseMAKE(raw); break;\n        case 'BBL': parsed = parseBBL(raw); break;\n        case 'MyMo': parsed = parseMyMo(raw); break;\n        case 'SCB': parsed = parseSCB(raw); break;\n        case 'PromptPay': parsed = parsePromptPay(raw); break;\n        default: parsed = parseGeneric(raw); break;\n      }\n\n      const normalized = normalizeKeys(parsed, raw, bank);\n      if (errorNote) { normalized.error_note = errorNote; normalized.low_confidence = true; }\n\n      const orig = origArr[i] || {};\n      const out = Object.assign({}, normalized, {\n        originalIndex: orig.index ?? i,\n        fileId: orig.fileId ?? null,\n        filename: orig.filename ?? null,\n        chatId: orig.chatId ?? null\n      });\n\n      outputs.push({ json: out });\n      perSlipOutputs.push(out);\n    }\n\n    // Produce aggregated batch summary (single notificaton)\n    if (perSlipOutputs.length > 0) {\n      let total = 0.0;\n      let countedAmounts = 0;\n      const bankCounts = {};\n      const refs = [];\n      const accounts = new Set();\n\n      perSlipOutputs.forEach(s => {\n        if (s['จำนวนเงิน']) {\n          const v = parseFloat(String(s['จำนวนเงิน']).replace(/,/g,''));\n          if (!isNaN(v)) { total += v; countedAmounts += 1; }\n        }\n        const b = s['จากธนาคาร'] || 'unknown';\n        bankCounts[b] = (bankCounts[b] || 0) + 1;\n        if (s['เลขอ้างอิง']) refs.push(s['เลขอ้างอิง']);\n        if (s['เลขที่บัญชี']) accounts.add(s['เลขที่บัญชี']);\n        if (s['เลขที่บัญชีผู้รับ']) accounts.add(s['เลขที่บัญชีผู้รับ']);\n      });\n\n      const aggregated = {\n        aggregated: true,\n        type: 'batch_summary',\n        count: perSlipOutputs.length,\n        total_amount: countedAmounts ? total.toFixed(2) : null,\n        bank_breakdown: bankCounts,\n        references: refs,\n        accounts_in_batch: Array.from(accounts),\n        slips: perSlipOutputs.map(s => ({\n          ref: s['เลขอ้างอิง'] || null,\n          amount: s['จำนวนเงิน'] || null,\n          datetime: s['วันเวลา ที่ทำรายการ'] || null,\n          from_bank: s['จากธนาคาร'] || null,\n          sender: s['ชื่อผู้โอน'] || null,\n          receiver: s['ชื่อผู้รับ'] || null,\n          low_confidence: s['low_confidence'] || false\n        })),\n        generated_at: (new Date()).toISOString()\n      };\n\n      outputs.push({ json: aggregated });\n    }\n\n    return outputs;\n  }\n\n  // Mode B: multiple items (each item is one vision response)\n  for (let k = 0; k < items.length; k++) {\n    const it = items[k];\n    const resp = it.json && (it.json.visionResponse || it.json.response || it.json_visionResponse || it.json.responses) ?\n                 (it.json.visionResponse || it.json.response || it.json_visionResponse || (Array.isArray(it.json.responses) ? it.json.responses[0] : null))\n                 : null;\n    let raw = \"\";\n    let errorNote = null;\n\n    if (!resp) {\n      if (it.json && (it.json.text || it.json.parsedText || it.json.rawText)) raw = String(it.json.text || it.json.parsedText || it.json.rawText).trim();\n      else { errorNote = 'no_response_or_text'; }\n    } else {\n      if (resp.error) errorNote = typeof resp.error === 'string' ? resp.error : JSON.stringify(resp.error);\n      if (resp.textAnnotations && resp.textAnnotations[0] && resp.textAnnotations[0].description) raw = String(resp.textAnnotations[0].description).trim();\n      else if (resp.fullTextAnnotation && resp.fullTextAnnotation.text) raw = String(resp.fullTextAnnotation.text).trim();\n      else raw = JSON.stringify(resp);\n    }\n\n    const bank = detectBankName(raw);\n    let parsed;\n    switch(bank) {\n      case 'KTB': parsed = parseKtb(raw); break;\n      case 'KBank': parsed = parseKBankSlip(raw); break;\n      case 'MAKEbyKBank': parsed = parseMAKE(raw); break;\n      case 'BBL': parsed = parseBBL(raw); break;\n      case 'MyMo': parsed = parseMyMo(raw); break;\n      case 'SCB': parsed = parseSCB(raw); break;\n      case 'PromptPay': parsed = parsePromptPay(raw); break;\n      default: parsed = parseGeneric(raw); break;\n    }\n\n    const normalized = normalizeKeys(parsed, raw, bank);\n    if (errorNote) { normalized.error_note = errorNote; normalized.low_confidence = true; }\n\n    outputs.push({ json: Object.assign({}, normalized, {\n      originalIndex: it.json && it.json.originalIndex != null ? it.json.originalIndex : k,\n      fileId: it.json && it.json.fileId ? it.json.fileId : null,\n      filename: it.json && it.json.filename ? it.json.filename : null,\n      chatId: it.json && it.json.chatId ? it.json.chatId : null\n    })});\n  }\n\n  return outputs;\n} catch (err) {\n  return [{ json: { error: String(err), stack: err && err.stack ? err.stack : null } }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7984,
        -1088
      ],
      "id": "c37fa974-bd73-47b6-88ad-51268bb87ef4",
      "name": "ParseSlip",
      "executeOnce": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.สกุลเงิน }}",
                    "rightValue": "=JPY",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "359c0581-9e57-43aa-ad94-e8c0ae2cc5b6"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "562d9498-e557-4b39-8698-00e2ac33da9c",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "={{ $json['ชื่อผู้โอน'] }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -6544,
        -1248
      ],
      "id": "00e9d1a3-81cb-432d-9a73-f4bec203b6bd",
      "name": "unk",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://vision.googleapis.com/v1/images:annotate?key=AIzaSyCSd5Kn24vQSVaSulSlA3Nx3i7cDefC5Hg",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ \"requests\": $input.item.json.requests }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8480,
        -1104
      ],
      "id": "5c413f25-29c4-48e2-ae07-73562e2b9d62",
      "name": "CloudVission",
      "executeOnce": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "slip",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ad0e2cc2-0c9e-4941-be4d-b99ee0c8712e"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a1640d34-a01d-4f2f-bbd2-5e89676536ac",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "statement",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -10224,
        -768
      ],
      "id": "7278c418-1ecc-4b81-b943-d8a2174555c2",
      "name": "Switch Type"
    },
    {
      "parameters": {
        "jsCode": "// ตรวจสอบว่า input มี fields เหล่านี้:\n// - items[0].json.slips\n// - items[0].json.statements  \n// - items[0].json.blacklistSet\n// - items[0].json.blacklistMap (optional)\n// - items[0].json.blacklistNames\n\n// Code เดิมของคุณใช้ได้ แค่เพิ่มการ validate input:\n\nconst data = items[0].json;\n\nif (!data.slips || !data.statements) {\n  return [{\n    json: {\n      error: 'Missing required input: slips or statements',\n      matches: [],\n      notFound: []\n    }\n  }];\n}\n\nconst slips = data.slips;\nconst statements = data.statements;\nconst blacklistSetArray = data.blacklistSet || [];\nconst blacklistNames = data.blacklistNames || {};\nconst blacklistSet = new Set(blacklistSetArray.map(x => String(x)));\n\n// ใช้ code เดิมต่อจากนี้...\n\n\n\n\nconst slips = items[0].json.slips || [];\nconst statements = items[0].json.statements || [];\nconst blacklistSetArray = items[0].json.blacklistSet || [];\nconst blacklistNames = items[0].json.blacklistNames || {}; // object: account -> [names]\nconst blacklistSet = new Set(blacklistSetArray.map(x => String(x)));\n\nfunction toTime(s) {\n  if(!s) return 0;\n  const str = (''+s).trim();\n  const m = str.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})\\s+(\\d{1,2}):(\\d{2})/);\n  if (m) {\n    let day=m[1], month=m[2], year=m[3];\n    if (year.length === 2) year = '20'+year;\n    const hh=m[4].padStart(2,'0'), mm=m[5];\n    return new Date(`${year}-${month.padStart(2,'0')}-${day.padStart(2,'0')}T${hh}:${mm}:00`).getTime();\n  }\n  const t = Date.parse(str);\n  return isNaN(t) ? 0 : t;\n}\n\nfunction normalizeAmount(a) {\n  if (a == null) return null;\n  if (typeof a === 'number') return a;\n  const s = (''+a).replace(/[, \\u0E3F฿\\$]/g,'').trim();\n  const f = parseFloat(s);\n  return isNaN(f) ? null : f;\n}\n\nfunction normName(n){\n  if(!n) return '';\n  return String(n).toLowerCase().replace(/\\s+/g,'').replace(/[^\\p{L}\\p{N}]/gu,'');\n}\n\nlet matches = [];\nlet notFound = [];\nconst used = new Array(statements.length).fill(false);\n\nfor (let slip of slips) {\n  let found = false;\n  const slipRef = slip[\"เลขอ้างอิง\"] || slip[\"reference\"] || null;\n  const slipAmt = normalizeAmount(slip[\"จำนวนเงิน\"]);\n  const slipTime = toTime(slip[\"วันเวลา\"] || slip[\"วันเวลา ที่ทำรายการ\"] || slip[\"time\"]);\n  const slipAcc = slip[\"เลขที่บัญชี\"] ? String(slip[\"เลขที่บัญชี\"]) : null;\n  const slipNameNorm = normName(slip[\"ชื่อผู้โอน\"] || slip[\"ชื่อผู้รับ\"] || '');\n\n  for (let i=0;i<statements.length;i++) {\n    if (used[i]) continue;\n    const st = statements[i];\n    const stRef = st[\"เลขอ้างอิง\"] || st[\"reference\"] || null;\n    const stAmt = normalizeAmount(st[\"จำนวนเงิน\"]);\n    const stTime = toTime(st[\"วันเวลา\"] || st[\"วันเวลา ที่ทำรายการ\"] || st[\"time\"]);\n    const stAcc = st[\"เลขที่บัญชี\"] ? String(st[\"เลขที่บัญชี\"]) : null;\n    const stNameNorm = normName(st[\"ชื่อผู้โอน\"] || st[\"ชื่อผู้รับ\"] || '');\n\n    // name matching against blacklist names too\n    const blackNames = (blacklistNames[stAcc] || []).map(n=>normName(n));\n\n    // helper to check name match (slip vs statement vs blacklist)\n    const nameMatch = (slipNameNorm && stNameNorm && (slipNameNorm === stNameNorm)) ||\n                      (slipNameNorm && blackNames.some(bn => bn.includes(slipNameNorm) || slipNameNorm.includes(bn)));\n\n    //เพิ่มส่วนนี้ ต้องการให้ระบบแจ้งเตือนบัญชีม้าเมื่อ ชื่อใน Slip ไปตรงกับชื่อใน Blacklist (ถึงแม้บัญชีจะไม่ตรง)\n    const isBlacklistNameMatch = blacklistNames[stAcc].some(bn => bn === slipNameNorm);\n    \n    // 1) exact reference\n    if (slipRef && stRef && slipRef === stRef) {\n      matches.push({\n        slip, statement: st, matchType: \"RefNo\",\n        slipAccount: slipAcc, statementAccount: stAcc,\n        blacklist: blacklistSet.has(stAcc) || blacklistSet.has(slipAcc) || false,\n        nameMatch\n      });\n      used[i] = true; found = true; break;\n    }\n\n    // 2) amount + time window\n    if (slipAmt !== null && stAmt !== null && Math.abs(slipAmt - stAmt) < 0.01 && Math.abs(slipTime - stTime) < 5 * 60 * 1000) {\n      matches.push({\n        slip, statement: st, matchType: \"Amount+Time\",\n        slipAccount: slipAcc, statementAccount: stAcc,\n        blacklist: blacklistSet.has(stAcc) || blacklistSet.has(slipAcc) || false,\n        nameMatch\n      });\n      used[i] = true; found = true; break;\n    }\n  }\n  if (!found) {\n    notFound.push({ slip, blacklist: blacklistSet.has(String(slipAcc)) || false });\n  }\n}\n\nreturn [\n  { json: { matches } },\n  { json: { notFound } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3376,
        -1120
      ],
      "id": "66c5b18d-85a2-4feb-9d71-4568c51a3d39",
      "name": "MATCH1",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=คุณคือผู้เชี่ยวชาญระดับโลกด้านการประมวลผลข้อมูลทางการเงิน การรักษาความปลอดภัยทางไซเบอร์ และการประมวลผลภาษาธรรมชาติ (Financial AI & Cybersecurity NLP Expert)\nคุณเป็นหัวหน้าทีมวิจัยของบริษัทเทคโนโลยีใน Silicon Valley ที่มีภารกิจในการสกัดข้อมูลทางการเงินจาก “ข้อความเดินบัญชี (Bank Statement)”\nโดยต้องให้ผลลัพธ์ที่ แม่นยำ ถูกต้อง ปลอดภัย และมีโครงสร้างสม่ำเสมอสูงสุด\n\n🔹 หน้าที่หลักของคุณ\n\nอ่านและสกัดข้อมูลธุรกรรมทางการเงินทั้งหมดที่ปรากฏในเอกสาร\nและจัดผลลัพธ์เป็น รายการธุรกรรมทั้งหมดในรูปแบบ JSON Array\nโดยแต่ละรายการต้องมีฟิลด์ดังนี้:\n\n[\n  {\n    \"ชื่อผู้โอน\": \"\",\n    \"ชื่อผู้รับ\": \"\",\n    \"จำนวนเงิน\": \"\",\n    \"วันเวลา ที่ทำรายการ\": \"\",\n    \"เลขอ้างอิง\": \"\",\n    \"รายละเอียด\": \"\",\n    \"จากธนาคาร\": \"\",\n    \"ยอดคงเหลือ\": \"\",\n    \"TYPE\": \"\",\n    \"Debit / Credit\": \"\"\n  }\n]\n\n🔸 กฎการสกัดข้อมูล\n\nชื่อผู้โอน / ชื่อผู้รับ\n\nถ้าเป็นรายการ โอนออก / ถอน / ชำระบิล → เจ้าของบัญชีคือ “ชื่อผู้โอน”\n\nถ้าเป็นรายการ รับโอน / เงินเข้า / Prompt-IN / Credit → เจ้าของบัญชีคือ “ชื่อผู้รับ”\n\nให้ใช้ชื่อจากข้อความจริงใน Statement เท่านั้น ห้ามเดาหรือสรุป\n\nจำนวนเงิน (Amount)\n\nต้องแสดงเป็นตัวเลขทศนิยมสองตำแหน่ง เช่น \"703.00\"\n\nถ้าเป็นสกุลต่างประเทศ ให้ใส่หน่วยเงิน เช่น \"4836.00 JPY\"\n\nถ้ามีเครื่องหมายลบหรือคำว่า Debit ให้ถือว่าเป็น “เงินออก”\n\nวันเวลา ที่ทำรายการ\n\nต้องสกัดทั้งวันที่และเวลา เช่น \"15/10/2568 19:09\"\n\nถ้ามีเฉพาะวันที่ให้ระบุแค่วัน เช่น \"15/10/2568\"\n\nเลขอ้างอิง (Reference No.)\n\nหมายเลขธุรกรรม เช่น \"015288190935ATF08426\"\n\nถ้าไม่พบให้ใส่ค่า null\n\nรายละเอียด (Description)\n\nให้สกัดข้อความบอกรายละเอียด เช่น “PromptPay”, “ชำระบิล”, “โอนเงินผ่าน KPLUS”, “POS”, “ATM Withdrawal”\n\nถ้ามีชื่อร้าน/สถานที่ต่างประเทศ ให้แปลไว้ในวงเล็บ เช่น \"AEON SAPPORO (อิออน ซัปโปโร)\"\n\nจากธนาคาร (Bank Source)\n\nตรวจจับจากคำในข้อความ เช่น\n\nกสิกร / KBank / MAKE → \"MAKEbyKBank\"\n\nไทยพาณิชย์ / SCB → \"SCB\"\n\nกรุงเทพ / Bangkok Bank → \"BBL\"\n\nกรุงไทย / Krungthai → \"KTB\"\n\nออมสิน / MyMo → \"MyMo\"\n\nพร้อมเพย์ / PromptPay → \"PromptPay\"\n\nหากไม่พบให้ใส่ค่า null\n\nยอดคงเหลือ (Balance)\n\nสกัดยอดหลังทำรายการ เช่น \"15,302.12\"\n\nถ้าไม่พบให้ใส่ null\n\nTYPE\n\nให้ระบุประเภทของธุรกรรม เช่น\n\"โอนเงินออก\", \"รับโอนเงินเข้า\", \"ถอนเงินสด\", \"ฝากเงิน\", \"PromptPay\", \"ชำระบิล\", \"ค่าใช้จ่าย\", \"รายรับ\"\n\nDebit / Credit\n\n\"Debit\" หมายถึง เงินออกจากบัญชี\n\n\"Credit\" หมายถึง เงินเข้าบัญชี\n\n🔒 ข้อบังคับเพิ่มเติม\n\nห้ามใส่คำอธิบายอื่นนอกเหนือจาก JSON Output\n\nถ้าข้อมูลใดไม่สามารถระบุได้ ให้ใส่ค่าเป็น null\n\nทุกค่าใน JSON ต้องอิงจากข้อความจริงใน Statement เท่านั้น\n\nห้ามใช้คำที่ไม่ได้ปรากฏในเอกสาร\n\nห้ามเพิ่ม ฟิลด์ หรือ ข้อความนอกเหนือจากที่ระบุ\n\nห้ามมี prefix/suffix อย่าง “output”, “json”, หรือเครื่องหมายโค้ดบล็อก\n\n✅ ตัวอย่างผลลัพธ์ (ตัวอย่างเท่านั้น)\n[\n  {\n    \"ชื่อผู้โอน\": \"น.ส. ปรีญามล พลเกิ้น\",\n    \"ชื่อผู้รับ\": \"สมหวัง\",\n    \"จำนวนเงิน\": \"703.00\",\n    \"วันเวลา ที่ทำรายการ\": \"15/10/2568 19:09\",\n    \"เลขอ้างอิง\": \"015288190935ATF08426\",\n    \"รายละเอียด\": \"โอนเงินสำเร็จ\",\n    \"จากธนาคาร\": \"MAKEbyKBank\",\n    \"ยอดคงเหลือ\": \"5,920.00\",\n    \"TYPE\": \"โอนเงินออก\",\n    \"Debit / Credit\": \"Debit\"\n  },\n  {\n    \"ชื่อผู้โอน\": \"บริษัท สไมล์รีเทล จำกัด\",\n    \"ชื่อผู้รับ\": \"น.ส. ปรีญามล พลเกิ้น\",\n    \"จำนวนเงิน\": \"1,000.00\",\n    \"วันเวลา ที่ทำรายการ\": \"19/10/2568 09:41\",\n    \"เลขอ้างอิง\": \"TRX0083919200\",\n    \"รายละเอียด\": \"Prompt-IN โอนเข้า\",\n    \"จากธนาคาร\": \"KTB\",\n    \"ยอดคงเหลือ\": \"8,850.00\",\n    \"TYPE\": \"รับโอนเงินเข้า\",\n    \"Debit / Credit\": \"Credit\"\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -8592,
        -464
      ],
      "id": "052aaf51-ae5a-42ee-8e9e-1482e00da222",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -8608,
        -256
      ],
      "id": "568f02aa-3527-4557-8d1d-e76d266ab2b5",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "ENsZ8KxEbcSjSroH",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4432,
        -1008
      ],
      "id": "7d1efca2-d4c4-4840-847d-ee3161bfaefc",
      "name": "Merge",
      "disabled": true
    },
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query",
          "*"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -11392,
        -1136
      ],
      "id": "f553ed22-1e65-460e-9036-0432a727f178",
      "name": "Telegram Trigger",
      "webhookId": "7de79d11-8360-457d-8ef7-fb575799c399",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Sent Slip').item.json.result.chat.id }}",
        "text": "\"มีสลิปจากธนาคาร ที่ไม่รู้จักเข้ามาค่ะ\"",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -6240,
        -1472
      ],
      "id": "d6f58176-8c92-4c37-bbd3-d6b5bb867765",
      "name": "UNKNOWN1",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://apigw1.bot.or.th/bot/public/Stat-ExchangeRate/v2/DAILY_AVG_EXG_RATE/",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "start_period",
              "value": "={{ $('Date & Time').item.json.formatted_date_for_api }}"
            },
            {
              "name": "end_period",
              "value": "={{ $('Date & Time').item.json.formatted_date_for_api }}"
            },
            {
              "name": "currency",
              "value": "={{ $json.สกุลเงิน }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-IBM-Client-Id",
              "value": "kF1bK5nM1bS1aE4kL5hE4bU7jG7aT0rD6qP6sN8tM1iY0jQ0uC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6192,
        -1168
      ],
      "id": "34246906-14f6-42a5-a91b-fc1b550d3ef5",
      "name": "BOT",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Function Node: statement_parser_v3\n * Author: Silicon Valley FinTech Ops\n * Purpose: Clean + extract structured transaction data from OCR result\n */\n\nconst itemsInput = $input.all();\nif (!itemsInput.length) return [];\n\nlet rawText = itemsInput[0].json.output || \"\";\nif (rawText.startsWith(\"```json\")) {\n  rawText = rawText.replace(/^```json/, \"\").replace(/```$/, \"\").trim();\n}\n\nlet ocrArray;\ntry {\n  ocrArray = JSON.parse(rawText);\n} catch (err) {\n  throw new Error(\"❌ JSON parse failed: \" + err.message);\n}\n\n// ---------- Step 1: character normalization ----------\nconst normalizeText = (t) => {\n  if (!t) return null;\n  return t\n    .replace(/[B]/g, \"8\")\n    .replace(/[;]/g, \"1\")\n    .replace(/[>]/g, \"9\")\n    .replace(/[<]/g, \"0\")\n    .replace(/[:]/g, \"2\")\n    .replace(/[?]/g, \"7\")\n    .replace(/[A]/g, \"4\")\n    .replace(/[=]/g, \"3\")\n    .replace(/[@]/g, \"6\")\n    .replace(/\\s+/g, \" \")\n    .trim();\n};\n\n// ---------- Step 2: regex extractors ----------\nconst extractDate = (t) => {\n  const m = t.match(/(\\d{1,2}\\/\\d{1,2}\\/\\d{4}(?:\\s\\d{1,2}[:.]\\d{2})?)/);\n  return m ? m[1] : null;\n};\nconst extractAmount = (t) => {\n  const m = t.match(/(\\d{1,3}(?:[,\\d]*)(?:\\.\\d{2})?)/);\n  return m ? m[1].replace(/,/g, \"\") : null;\n};\nconst extractBank = (t) => {\n  const banks = [\"MAKEbyKBank\", \"KPLUS\", \"Krungthai\", \"Bangkok Bank\", \"SCB\", \"MyMo\", \"PromptPay\"];\n  for (const b of banks) if (new RegExp(b, \"i\").test(t)) return b;\n  return null;\n};\nconst extractType = (t) => {\n  if (/PromptPay/i.test(t)) return \"PromptPay\";\n  if (/โอน|transfer/i.test(t) && /เข้า|Credit/i.test(t)) return \"รับโอนเงินเข้า\";\n  if (/โอน|transfer/i.test(t) && /ออก|Debit/i.test(t)) return \"โอนเงินออก\";\n  if (/รับ|Deposit/i.test(t)) return \"รับโอนเงินเข้า\";\n  return null;\n};\n\n// ---------- Step 3: build results ----------\nconst results = ocrArray.map((tx, i) => {\n  const mergedText = Object.values(tx).join(\" \");\n  const clean = normalizeText(mergedText);\n  const bank = extractBank(clean);\n  const date = extractDate(clean);\n  const amount = extractAmount(clean);\n  const type = extractType(clean);\n  const refMatch = clean.match(/\\b[0-9A-Z]{6,20}\\b/);\n\n  // Debit/Credit determination\n  let dc = \"Debit\";\n  if (/Credit/i.test(clean) || /รับ|เข้า/.test(clean)) dc = \"Credit\";\n  if (/Debit/i.test(clean) || /ออก|PromptPay/.test(clean)) dc = \"Debit\";\n\n  return {\n    json: {\n      \"ชื่อผู้โอน\": tx[\"ชื่อผู้โอน\"] || null,\n      \"ชื่อผู้รับ\": tx[\"ชื่อผู้รับ\"] || null,\n      \"จำนวนเงิน\": amount ? parseFloat(amount).toFixed(2) : null,\n      \"วันเวลา ที่ทำรายการ\": date,\n      \"เลขอ้างอิง\": refMatch ? refMatch[0] : null,\n      \"รายละเอียด\": tx[\"รายละเอียด\"] || type || null,\n      \"จากธนาคาร\": bank,\n      \"ยอดคงเหลือ\": tx[\"ยอดคงเหลือ\"] ? normalizeText(tx[\"ยอดคงเหลือ\"]) : null,\n      \"TYPE\": type || tx[\"TYPE\"] || null,\n      \"Debit / Credit\": dc,\n      \"index\": i + 1,\n      \"source\": \"statement_parser_v3\"\n    }\n  };\n});\n\nconsole.log(`✅ parsed ${results.length} records`);\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8160,
        -544
      ],
      "id": "84ca9e13-6f8d-4582-88b1-d1b99b852bb5",
      "name": "Statement"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "\"ได้รับ Statement แล้วค่ะ กำลังดำเนินการตรวจสอบค่ะ...\"",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -9936,
        -640
      ],
      "id": "6dd0aab0-7c76-40e5-b702-decc30460caf",
      "name": "Sent Stm",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "\"ได้รับสลิปแล้วค่ะ กำลังดำเนินการตรวจสอบค่ะ...\"",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -9952,
        -928
      ],
      "id": "22c24834-8402-4c48-b59b-90ee2b198954",
      "name": "Sent Slip",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Switch Type').item.json.fileId }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -9504,
        -608
      ],
      "id": "c763dacb-fbb0-4e43-a5ca-94f94f26e9c5",
      "name": "get file stm",
      "webhookId": "57b7f3aa-a02a-4298-aba9-fa26494bc068",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Switch Type').item.json.fileId }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -9744,
        -1072
      ],
      "id": "922496d3-bd77-4f30-99db-5fdc32b32e12",
      "name": "Get a file Slip",
      "webhookId": "57b7f3aa-a02a-4298-aba9-fa26494bc068",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -9216,
        -624
      ],
      "id": "8dd1ff14-4453-46bd-a167-78302fb91e0d",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://vision.googleapis.com/v1/images:annotate?key=AIzaSyCSd5Kn24vQSVaSulSlA3Nx3i7cDefC5Hg",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ \"requests\": $input.item.json.requests }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8288,
        208
      ],
      "id": "49990d53-8ad5-46fd-b0fd-77db851a9e91",
      "name": "CloudVission1",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## ทางแยก บชblacklist\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4992,
        -1248
      ],
      "typeVersion": 1,
      "id": "d77d23df-8a6d-445a-a4fa-99be10862191",
      "name": "Sticky Note",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Switch Types').item.json.callback_query.data }}",
                    "rightValue": "Pre-Check",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "515caa9c-9cf3-41f1-9284-c36fb94c5b3a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9cf7a77f-d8fd-4dfd-b55d-cea51e0afb88",
                    "leftValue": "={{ $('Switch Types').item.json.callback_query.data }}",
                    "rightValue": "Post-Check",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -10368,
        -1472
      ],
      "id": "1e2d8fd0-8c99-4307-b56d-689187811b63",
      "name": "Horse"
    },
    {
      "parameters": {
        "content": "## SLIps/Stm\n\n\n",
        "height": 208,
        "width": 224
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -10544,
        -1024
      ],
      "typeVersion": 1,
      "id": "84d178f7-5401-4a45-ab5c-379b38ce5d55",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.callback_query.message.chat.id }}",
        "text": "กรุณาพิมพ์เลขบัญชี หรือ ชื่อที่ต้องการตรวจสอบ \n(ตัวอย่าง: 1234567890 / เทเลอร์ ปลั๊กไฟ )",
        "replyMarkup": "forceReply",
        "forceReply": {
          "force_reply": "={{ true }}"
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -10112,
        -1600
      ],
      "id": "d34e0727-54a0-4393-aee9-b3b5cd200aad",
      "name": "Pre-Check",
      "webhookId": "7d13a144-469a-40f2-9fc3-e936c33c0115",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.callback_query.message.chat.id }}",
        "text": "กรุณาอัปโหลดสลิป หรือพิมพ์ชื่อและเลขบัญชียอดเงิน (ถ้ามี)",
        "replyMarkup": "={{ true }}",
        "forceReply": {},
        "replyKeyboardOptions": {},
        "replyKeyboardRemove": {},
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -10096,
        -1312
      ],
      "id": "a317aae1-f58b-4423-8a0e-3d47a5ae3803",
      "name": "Post-Check",
      "webhookId": "01565f74-1400-4bd0-bb8b-39ad778c3b66",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "## HORSE AC\n\n",
        "height": 272,
        "width": 528,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -10512,
        -1568
      ],
      "typeVersion": 1,
      "id": "d7e4de7b-b50c-42fa-b4a4-21d28263f4e0",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{$json[\"callback_query\"][\"id\"]}}",
        "additionalFields": {
          "show_alert": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -10656,
        -1472
      ],
      "id": "1877020d-3ff3-4ee8-b2d1-a3d587be6b20",
      "name": "Answer Query a callback",
      "webhookId": "5445db9c-9e3f-499d-89e2-ca34400007c4",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "## message reply BLACKLIST\n",
        "height": 192,
        "width": 432,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -11184,
        -1968
      ],
      "typeVersion": 1,
      "id": "dc075d47-2076-4dea-b85e-7408fc9c3f7b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "const api = items[0].json;     // ผลจาก Blacklist API\nconst sheet = items[1].json;   // row จาก Google Sheets\nconst acc = api.query?.bank_number || api.request_bank;\n\nconst externalFlag = api?.result?.is_blacklisted || api?.is_blacklist; // ปรับตามโครงสร้างจริง\nconst sheetFlag = sheet ? true : false;\n\nreturn [{\n  json: {\n    account: acc,\n    external: externalFlag,\n    sheetFound: sheetFlag,\n    externalRaw: api,\n    sheetRow: sheet\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3152,
        -720
      ],
      "id": "42d67f50-b580-427c-912f-8f940fd5f617",
      "name": "Blacklist/Sheets",
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Loop Over Items').item.json.chatId }}",
        "text": "❌ “บัญชีเข้าข่าย”",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "แจ้งความผ่านเว็บไซต์",
                    "additionalFields": {
                      "web_app": {
                        "url": "https://checkgon.go.th/"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {},
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2768,
        -624
      ],
      "id": "06d4285a-c488-43db-b239-94e765f97c76",
      "name": "found",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ea43e3ff-fef0-4bf2-8f14-f3a6538b4166",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2960,
        -720
      ],
      "id": "773eed5b-b459-43ab-832e-57a82321068b",
      "name": "If1",
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Loop Over Items').item.json.chatId }}",
        "text": "✅ “บัญชีนี้ปลอดภัย ไม่พบใน blacklist” หรือ “ไม่พบใน DB แต่โปรดระวัง”",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2768,
        -784
      ],
      "id": "eb6afede-3444-4fa7-8903-d524e9db7096",
      "name": "unfound",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Node: Merge slip/stm (แก้ไข)\n\nfunction normalizeItem(item) {\n  return {\n    'เลขอ้างอิง': item['เลขอ้างอิง'] || item['reference'] || null,\n    'เลขที่บัญชี': item['เลขที่บัญชี'] || item['account'] || item['account_number'] || null,\n    'ชื่อผู้โอน': item['ชื่อผู้โอน'] || item['from'] || item['sender'] || null,\n    'ชื่อผู้รับ': item['ชื่อผู้รับ'] || item['to'] || item['receiver'] || null,\n    'จำนวนเงิน': item['จำนวนเงิน'] || item['amount'] || null,\n    'วันเวลา ที่ทำรายการ': item['วันเวลา ที่ทำรายการ'] || item['date'] || item['datetime'] || item['time'] || null,\n    'บันทึกช่วยจำ': item['บันทึกช่วยจำ'] || item['memo'] || item['note'] || null,\n    'จากธนาคาร': item['จากธนาคาร'] || item['bank'] || null,\n    'raw': item\n  };\n}\n\nconst allSlips = [];\nconst allStatements = [];\n\nitems.forEach(item => {\n  const type = item.json.type;\n  const data = item.json;\n  \n  if (type === 'slip') {\n    allSlips.push(normalizeItem(data));\n  } else if (type === 'statement') {\n    allStatements.push(normalizeItem(data));\n  } else {\n    // Try to guess based on fields\n    if (data['เลขอ้างอิง'] || data.reference) {\n      allSlips.push(normalizeItem(data));\n    } else {\n      allStatements.push(normalizeItem(data));\n    }\n  }\n});\n\nreturn [{\n  json: {\n    slips: allSlips,\n    statements: allStatements,\n    counts: {\n      slips: allSlips.length,\n      statements: allStatements.length\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4256,
        -1008
      ],
      "id": "106fe9a6-5f6d-43ec-8e34-b11350de80a6",
      "name": "Merge slip/stm",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1142168077,
          "mode": "list",
          "cachedResultName": "Matching",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1142168077"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3152,
        -576
      ],
      "id": "33961603-7469-4e37-9630-25da9c1b3b6a",
      "name": "Mstatement",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{$json[\"message\"] ? $json[\"message\"][\"chat\"][\"id\"] : $json[\"callback_query\"][\"message\"][\"chat\"][\"id\"]}}",
        "text": "เลือกเมนูที่ต้องการ",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "ตรวจสอบบัญชีม้าก่อนโอน",
                    "additionalFields": {
                      "callback_data": "Pre-Check"
                    }
                  },
                  {
                    "text": "อ่านสลิปโอนเงิน (กรุณาแนบสลิป)",
                    "additionalFields": {
                      "callback_data": "Post-Check"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -10912,
        -1200
      ],
      "id": "fd0bcf6e-2156-42bf-b6bc-65ccf1bffa68",
      "name": "Send Inline",
      "webhookId": "3f906d48-0ee5-43bb-b0f3-ca0203644a23",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// UserReplyAc (Final) — วางใน Code node\nconst msg = $json[\"message\"] || {};\nconst raw = (msg[\"text\"] || \"\").trim();\n\n// สังเกต: ถ้าจะรับ reply จาก ForceReply ให้แน่ใจว่า raw จะมาจาก message.text\nconst digits = raw.replace(/\\D/g, '');\nconst isNumeric = digits.length >= 6 && (digits.length / Math.max(1, raw.length) > 0.6);\n\nlet query = {};\nlet ok = false;\nlet queryType = null;\n\nif (isNumeric) {\n  // เลขบัญชี\n  query = { bank_number: digits };\n  queryType = 'number';\n  ok = true;\n} else if (raw.length > 2) {\n  // ชื่อ — แยกเป็น first / last (ต้องมีอย่างน้อย 2 พาร์ท)\n  const parts = raw.split(/\\s+/).filter(Boolean);\n  if (parts.length >= 2) {\n    query = { first_name: parts[0], last_name: parts.slice(1).join(' ') };\n    queryType = 'name';\n    ok = true;\n  } else {\n    ok = false;\n  }\n}\n\nreturn [{\n  json: {\n    ok,\n    error: ok ? null : \"invalid_input (provide bank number or first+last name)\",\n    query,\n    queryType,\n    raw,\n    source_chat_id: msg.chat?.id\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10928,
        -1920
      ],
      "id": "f6427dae-14a4-4183-bc50-6725fc2ed144",
      "name": "UserReplyAc"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "68b45b34-b72e-4f93-a679-f087ebfddc5f",
              "leftValue": "={{ $json.found }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -8912,
        -1824
      ],
      "id": "b22cd8f3-74d0-4332-8614-70eed7830d5a",
      "name": "CheckBlack"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}\n",
        "text": "=⚠️☠️ พบเลขบัญชีนี้ในฐานข้อมูลที่น่าสงสัย👿⁉️\n\n🗣️ผู้ต้องสงสัยอาจใช้หลายบัญชีในการทุจริต🚔🚨\nโปรดระมัดระวังในการทำธุรกรรมทางการเงินอย่างเคร่งครัด \nเพื่อป้องกันการตกเป็นเหยื่อจากมิจฉาชีพ😱😰😭\n\n🔍เลขบัญชีที่เกี่ยวข้อง (ตัวอย่าง) \n {{ $json.records[0].banks[0].abbre }}: {{ $json.records[0].banks[0].bank_number }}\n\n🚦สถานะ: ❌ พบใน Blacklist 💯💥\n👤ชื่อ:{{ $json.account }}\n\n📢ประวัติที่พบทั้งหมด {{ $json.reports_count }} รายการ \n💔ยอดโอนทั้งหมด {{ $json.total_loss }} บาท\n\n⚔️ตัวอย่างรายงานล่าสุด🪬\n📦สินค้า:{{ $json.records[0].product }}\n💰ยอดโอน: {{ $json.records[0].price }} บาท\n⏰วันที่เกิดเหตุ: {{ $json.records[0].date }}\n💈เพจขายของ: {{ $json.records[0].website }}\n🔖รายละเอียดเพิ่มเติม:{{ $json.records[0].detail_text }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "=🔗รายละเอียดเพิ่มเติม",
                    "additionalFields": {
                      "url": "=https://www.blacklistseller.com/report/report_preview/{{ $json.records[0].report_id }}\n"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -8640,
        -2016
      ],
      "id": "4c731527-f234-47ba-8895-7ff1faf696e0",
      "name": "Isblack",
      "webhookId": "a5970170-f428-490f-bd3b-f34449c9c9c4",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "=✅ ไม่พบเลขบัญชีใน blacklist 📢(แต่โปรดระวัง)\n🔍 เลขบัญชี: {{ $('ProcessLookup').first().json.query.bank_number || $('UserReplyAc').first().json.raw || 'ไม่พบเลขบัญชี' }}\nอย่างไรก็ตาม โปรดใช้ความระมัดระวังในการทำธุรกรรมเสมอ📌📌\n\n🚦สถานะ: ✅🎉 ไม่พบใน Blacklist ✨🚀\n👤 ชื่อ: {{ $('CheckBlack').first().json.account || 'ไม่ทราบชื่อ' }} 🤔💯\n📌 หมายเหตุ: ข้อมูลนี้อาจเป็นบัญชีใหม่หรือยังไม่มีรายงานเข้ามาในระบบ💥\n",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -8608,
        -1648
      ],
      "id": "c6d71424-a59f-4cc5-9b57-aa392c9c0c4e",
      "name": "Unblack",
      "webhookId": "a5970170-f428-490f-bd3b-f34449c9c9c4",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// รับข้อความที่ผู้ใช้พิมพ์ (รองรับรูปแบบหลายที่เป็นไปได้)\nconst inputText = $json[\"message\"]?.text || $json[\"callback_query\"]?.data || $json[\"text\"] || \"\";\nconst raw = (inputText || \"\").toString().trim();\n\n// Normalize: เอาเฉพาะตัวเลข (account เกือบทุกระบบเก็บเลขเท่านั้น)\nconst accountDigits = raw.replace(/\\D/g, '');\n\n// ถ้าต้องการให้รองรับมี dash/comma ให้ปรับ regex ข้างบนตามต้องการ\n\nreturn [{\n  json: {\n    account_raw: raw,         // เก็บ raw เพื่อ debug\n    account: accountDigits,   // field ที่จะส่งไป Blacklist API\n    source_chat_id: $json[\"message\"]?.chat?.id || $json[\"callback_query\"]?.message?.chat?.id\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9280,
        -2800
      ],
      "id": "50a04ad8-bcd4-40d9-9344-f51f26e551d8",
      "name": "Norm/ReplyAc",
      "disabled": true
    },
    {
      "parameters": {
        "resource": "chat",
        "chatId": "={{ $json[\"message\"]?.chat?.id \n   || $json[\"callback_query\"]?.message?.chat?.id \n   || $json.source_chat_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -9520,
        -2816
      ],
      "id": "f461f86c-1140-4fd4-ab0e-7674b0271bfb",
      "name": "ForceReply",
      "webhookId": "a5970170-f428-490f-bd3b-f34449c9c9c4",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// --- Node: NumAc (Final Data Preparation Unit) ---\n\n// ข้อมูลที่เข้ามาตอนนี้มีแค่ 1 item ที่สมบูรณ์ที่สุดแล้ว\nconst item = items[0].json;\n\n// ฟังก์ชันพิเศษสำหรับ \"ล้วง\" เข้าไปหาข้อมูลที่อาจถูกซ้อนกันหลายชั้น\nfunction findDeepValue(obj, key) {\n  let current = obj;\n  while (current && typeof current === 'object') {\n    if (key in current) return current[key];\n    current = current.json;\n  }\n  return undefined;\n}\n\n// --- 1. ดึงข้อมูลหลักจาก 'body' ซึ่งเป็นที่เก็บผลลัพธ์จาก API ---\nconst body = findDeepValue(item, 'body') || item;\nconst result = body.result || {};\nconst records = result.data || [];\n\n// --- 2. ดึง \"ยอดรวม\" และ \"รายละเอียด\" จาก Record แรกสุด ---\nlet reports_count = 0;\nlet total_loss = 0;\nlet firstRecord = {}; // สร้าง object ว่างๆ เผื่อกรณีไม่มี record\n\nif (records.length > 0) {\n  firstRecord = records[0];\n  // ใช้ freq_count และ total_price ที่ซ่อนอยู่ใน record แรก!\n  reports_count = firstRecord.freq_count || records.length;\n  total_loss = firstRecord.total_price || 0;\n}\n\n// --- 3. ดึงข้อมูลอื่นๆ ที่จำเป็น ---\nconst query = findDeepValue(item, 'query') || {};\nconst account = query.bank_number || `${query.first_name || ''} ${query.last_name || ''}`.trim();\nconst source_chat_id = findDeepValue(item, 'source_chat_id');\nconst found = result.found || false;\n\n// --- 4. สร้าง Output สุดท้ายที่สมบูรณ์แบบและ \"แบนราบ\" ---\nreturn [{\n  json: {\n    // ข้อมูลสำหรับ Telegram โดยตรง\n    chat_id: source_chat_id,\n    account: account,\n    found: found,\n    reports_count: reports_count,\n    total_loss: total_loss,\n    first_name: firstRecord.first_name || '',\n    last_name: firstRecord.last_name || '',\n    product: firstRecord.product || 'N/A',\n    price: firstRecord.price || 0,\n    date: firstRecord.date || 'N/A',\n    website: firstRecord.website || 'N/A',\n    \n    // ข้อมูลทั้งหมดเผื่อใช้งานในอนาคต\n    records: records \n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9040,
        -2768
      ],
      "id": "70590cde-e741-45f8-817c-c59bf3724515",
      "name": "FormatBlacklistMess",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2032423560,
          "mode": "list",
          "cachedResultName": "Blacklist",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=2032423560"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "={{ $json.found }}",
            "product": "={{ $json.product }}",
            "ชื่อผู้ต้องสงสัย": "={{ $json.account }}",
            "วันเวลา ที่เกิดเหตุ": "={{ $json['วันเวลา ที่เกิดเหตุ'] }}",
            "ประวัติทั้งหมด": "={{ $json.reports_count }}",
            "เลขบัญชี": "={{ $('ProcessLookup').first().json.query.bank_number || 'ไม่ระบุ' }}",
            "TotalPrice": "={{ $json.total_loss }}",
            "Price": "={{ $json.price }}",
            "website": "={{ $json.website }}",
            "details": "={{ $json.detail_text }}",
            "report_id": "={{ $json.report_id }}",
            "bank": "={{ $json.bank_abbre }}"
          },
          "matchingColumns": [
            "เลขบัญชี"
          ],
          "schema": [
            {
              "id": "วันเวลา ที่เกิดเหตุ",
              "displayName": "วันเวลา ที่เกิดเหตุ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขบัญชี",
              "displayName": "เลขบัญชี",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "bank",
              "displayName": "bank",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้ต้องสงสัย",
              "displayName": "ชื่อผู้ต้องสงสัย",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ประวัติทั้งหมด",
              "displayName": "ประวัติทั้งหมด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TotalPrice",
              "displayName": "TotalPrice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "product",
              "displayName": "product",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "website",
              "displayName": "website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "details",
              "displayName": "details",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "report_id",
              "displayName": "report_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -8400,
        -1824
      ],
      "id": "68e4d127-ae01-49ee-b115-76afa3d3a146",
      "name": "blCheck",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- NumAc (Smart Version for name & number) ---\nfunction findDeepValue(obj, key) {\n  if (!obj || typeof obj !== 'object') return undefined;\n  if (key in obj) return obj[key];\n  for (const k of Object.keys(obj)) {\n    const v = findDeepValue(obj[k], key);\n    if (v !== undefined) return v;\n  }\n  return undefined;\n}\n\n// --- 1. แยก summary กับ detail อัตโนมัติ ---\nlet summaryItem = null;\nlet detailItem = null;\n\nfor (const it of items) {\n  const data = findDeepValue(it.json, 'data');\n  if (Array.isArray(data) && data.length > 0) {\n    const first = data[0];\n    if (first.total_price !== undefined || first.freq_count !== undefined) {\n      summaryItem = it;\n    } else if (first.report_id !== undefined) {\n      detailItem = it;\n    }\n  }\n}\n\n// fallback ถ้าไม่เจอ\nif (!summaryItem) summaryItem = items[0];\nif (!detailItem) detailItem = items[1] || items[0];\n\n// --- 2. ดึงข้อมูลจากทั้งสอง ---\nconst summaryResult = findDeepValue(summaryItem.json, 'result') || {};\nconst detailResult = findDeepValue(detailItem.json, 'result') || {};\n\nconst summaryData = summaryResult.data?.[0] || {};\nconst detailRecords = Array.isArray(detailResult.data) ? detailResult.data : [];\n\n// --- [!!!] นี่คือโค้ดที่เพิ่มเข้ามาครับ [!!!] ---\n// เรียงลำดับรายงานจาก ปัจจุบัน (ใหม่สุด) ไปหา อดีต (เก่าสุด)\ndetailRecords.sort((a, b) => {\n  const dateA = new Date(a.date);\n  const dateB = new Date(b.date);\n  return dateB - dateA; // เรียงจาก B (ใหม่) ไป A (เก่า)\n});\n// --- [!!!] จบส่วนที่เพิ่ม [!!!] ---\n\n\n// --- 3. คำนวณข้อมูลหลัก ---\nconst reports_count = (detailRecords.length > 0)\n  ? detailRecords.length\n  : (summaryData.freq_count || 0);\n\nconst total_loss = summaryData.total_price ||\n  detailRecords.reduce((sum, r) => sum + (r.price || 0), 0) || 0;\n\n// --- 4. ดึงข้อมูลทั่วไป ---\nconst query = findDeepValue(summaryItem.json, 'query') || findDeepValue(detailItem.json, 'query') || {};\nconst account = query.bank_number || `${query.first_name || ''} ${query.last_name || ''}`.trim();\nconst source_chat_id =\n  findDeepValue(summaryItem.json, 'source_chat_id') ||\n  findDeepValue(detailItem.json, 'source_chat_id') ||\n  null;\n\n// --- 5. ส่งออกผลรวมทั้งหมด ---\nreturn [{\n  json: {\n    account,\n    found: detailResult.found || summaryResult.found || false,\n    reports_count,\n    total_loss,\n    records: detailRecords, // ✅ ข้อมูล 'records' นี้ถูกเรียงลำดับแล้ว\n    source_chat_id,\n    summary: summaryResult,\n    detail: detailResult\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9104,
        -1984
      ],
      "id": "c477b510-7175-489e-826c-1f060bfa697c",
      "name": "NumAc"
    },
    {
      "parameters": {
        "jsCode": "// Node: Collect All Accounts\n// Position: หลัง \"Merge slip/stm\" (-2736, 1952)\n\nconst data = items[0].json;\nconst slips = data.slips || [];\nconst statements = data.statements || [];\n\nfunction cleanAccount(acc) {\n  if (!acc) return null;\n  const cleaned = String(acc).replace(/[\\s\\-]/g, '').replace(/[^\\d]/g, '');\n  return (cleaned.length >= 6 && cleaned.length <= 20) ? cleaned : null;\n}\n\nfunction extractAccountFromName(name) {\n  if (!name) return null;\n  const digits = String(name).replace(/[^\\d]/g, '');\n  return (digits.length >= 10 && digits.length <= 15) ? digits : null;\n}\n\nconst accountSet = new Set();\n\n// Extract from slips\nslips.forEach(slip => {\n  // Primary account field\n  const acc = cleanAccount(slip['เลขที่บัญชี'] || slip['account']);\n  if (acc) accountSet.add(acc);\n  \n  // Check if sender/receiver names are actually account numbers\n  const sender = extractAccountFromName(slip['ชื่อผู้โอน']);\n  const receiver = extractAccountFromName(slip['ชื่อผู้รับ']);\n  if (sender) accountSet.add(sender);\n  if (receiver) accountSet.add(receiver);\n});\n\n// Extract from statements\nstatements.forEach(st => {\n  const acc = cleanAccount(st['เลขที่บัญชี'] || st['account']);\n  if (acc) accountSet.add(acc);\n  \n  const sender = extractAccountFromName(st['ชื่อผู้โอน']);\n  const receiver = extractAccountFromName(st['ชื่อผู้รับ']);\n  if (sender) accountSet.add(sender);\n  if (receiver) accountSet.add(receiver);\n});\n\n// Return deduplicated accounts with original data\nconst accounts = Array.from(accountSet);\n\nreturn [{\n  json: {\n    accounts,\n    accountCount: accounts.length,\n    originalData: { slips, statements }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4096,
        -1008
      ],
      "id": "d501275c-4789-4e4e-ad23-5b57b2ff362c",
      "name": "Collect All Accounts",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3888,
        -880
      ],
      "id": "9ac32479-de80-4c32-9608-cf3c5d558615",
      "name": "Loop Over Items1",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me1",
      "typeVersion": 1,
      "position": [
        -3888,
        -656
      ],
      "id": "9ed3b855-bc35-4a8f-b206-1cd01addeb75",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/bank-detail/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "vYFMotBIg1VrCilYAqPnNxzP5j1GUBMx-0ZexE40nB8"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3712,
        -976
      ],
      "id": "0b6fc542-eaac-41c3-865f-0bc6aa2df1e3",
      "name": "Batch Blacklist Check",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Node: Aggregate Blacklist Results\n// รวบรวมผลจาก HTTP Request ทั้งหมด\n\nfunction normalizeAccount(acc) {\n  return acc ? String(acc).replace(/[\\s\\-]/g, '').replace(/[^\\d]/g, '') : '';\n}\n\nconst blacklistMap = {};\nconst blacklistSet = new Set();\nconst blacklistNames = {};\n\n// Get original data from first item (ถูก pass through มา)\nlet originalData = null;\n\nitems.forEach(item => {\n  const res = item.json;\n  \n  // Keep original data\n  if (!originalData && res.originalData) {\n    originalData = res.originalData;\n  }\n  \n  // Extract account number\n  const account = normalizeAccount(\n    res.query?.bank_number || \n    res.request?.bank_number || \n    res.bank_number || \n    item.json.account\n  );\n  \n  if (!account) return;\n  \n  // Check if found in blacklist\n  const found = !!(\n    res.result?.found === true || \n    res.result?.found === 'true' || \n    (res.result?.data && res.result.data.length > 0)\n  );\n  \n  // Extract data array\n  const dataArr = res.result?.data || res.data || [];\n  const entries = Array.isArray(dataArr) ? dataArr : (dataArr ? [dataArr] : []);\n  \n  // Store in map\n  blacklistMap[account] = {\n    found,\n    data: entries,\n    raw: res\n  };\n  \n  // Add to set if blacklisted\n  if (found) {\n    blacklistSet.add(account);\n  }\n  \n  // Extract names\n  blacklistNames[account] = entries.map(d => {\n    const firstName = d.first_name || d.firstname || '';\n    const lastName = d.last_name || d.lastname || '';\n    return `${firstName} ${lastName}`.trim();\n  }).filter(Boolean);\n});\n\n// Return merged structure\nreturn [{\n  json: {\n    slips: originalData?.slips || [],\n    statements: originalData?.statements || [],\n    blacklistSet: Array.from(blacklistSet),\n    blacklistMap,\n    blacklistNames,\n    summary: {\n      totalAccounts: Object.keys(blacklistMap).length,\n      blacklistedCount: blacklistSet.size,\n      timestamp: new Date().toISOString()\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3536,
        -976
      ],
      "id": "c47ed607-5082-45ef-ba0c-342ac8be4210",
      "name": "Aggregate BL Results",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Node: Combine PDF Pages\nconst text = $json.text || '';\nreturn [{\n  json: {\n    data: text,\n    pageCount: (text.match(/\\f/g) || []).length + 1\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8976,
        -624
      ],
      "id": "995f80a4-ac22-4b9e-8cca-4a40f8f6206c",
      "name": "merg/page"
    },
    {
      "parameters": {
        "content": "## การรวบรวมบัญชีทั้งหมดก่อนส่งไปตรวจสอบในครั้งเดียว เพื่อลดการเรียก API ซ้ำซ้อน 😋😋\n",
        "width": 304,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4320,
        -1248
      ],
      "typeVersion": 1,
      "id": "bf7662ac-08be-4b77-aa22-2b111e3e4066",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text }} ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2960,
        -976
      ],
      "id": "cd1d590a-f228-46f7-ade4-e4931c7d88c4",
      "name": "recap",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// รับข้อมูลจาก Node 'MATCH1'\nconst matches = $json.matches || [];\nconst notFound = $json.notFound || [];\n\nconst resultsForSheet = [];\nconst timestamp = new Date().toISOString();\n\n// ประมวลผลรายการที่จับคู่สำเร็จ\nmatches.forEach(m => {\n  const slip = m.slip || {};\n  const statement = m.statement || {};\n  \n  // ค้นหาเลขบัญชีที่ใช้ตรวจสอบ (อาจมาจาก slip หรือ statement)\n  const accountToCheck = m.statementAccount || m.slipAccount || slip['เลขที่บัญชี'] || statement['เลขที่บัญชี'] || null;\n\n  resultsForSheet.push({\n    json: {\n      match_timestamp: timestamp,\n      match_status: 'MATCHED',\n      match_type: m.matchType || 'Unknown',\n      is_blacklisted: m.blacklist || false,\n      slip_ref: slip['เลขอ้างอิง'] || null,\n      slip_datetime: slip['วันเวลา ที่ทำรายการ'] || null,\n      slip_amount: slip['จำนวนเงิน'] || null,\n      slip_sender: slip['ชื่อผู้โอน'] || null,\n      slip_bank: slip['จากธนาคาร'] || null,\n      stm_ref: statement['เลขอ้างอิง'] || null,\n      stm_datetime: statement['วันเวลา ที่ทำรายการ'] || null,\n      stm_amount: statement['จำนวนเงิน'] || null,\n      blacklist_account: accountToCheck,\n      blacklist_details: m.blacklist ? 'Found in blacklist' : 'Not found',\n      \n    }\n  });\n});\n\n// ประมวลผลรายการที่หาไม่เจอ\nnotFound.forEach(n => {\n  const slip = n.slip || {};\n  const accountToCheck = n.slipAccount || slip['เลขที่บัญชี'] || null;\n\n  resultsForSheet.push({\n    json: {\n      match_timestamp: timestamp,\n      match_status: 'NOT_FOUND',\n      match_type: null,\n      is_blacklisted: n.blacklist || false,\n      slip_ref: slip['เลขอ้างอิง'] || null,\n      slip_datetime: slip['วันเวลา ที่ทำรายการ'] || null,\n      slip_amount: slip['จำนวนเงิน'] || null,\n      slip_sender: slip['ชื่อผู้โอน'] || null,\n      slip_bank: slip['จากธนาคาร'] || null,\n      stm_ref: null,\n      stm_datetime: null,\n      stm_amount: null,\n      blacklist_account: accountToCheck,\n      blacklist_details: n.blacklist ? 'Associated account found in blacklist' : 'Not found',\n    \n    }\n  });\n});\n\n// ส่งผลลัพธ์ทั้งหมดออกไปเป็น items แยกกันเพื่อให้ Google Sheets Node วนลูปบันทึกทีละแถว\nreturn resultsForSheet;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3184,
        -1232
      ],
      "id": "46394f97-27da-4165-bcfa-c642be69fcd3",
      "name": "Format for Sheets",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 667122089,
          "mode": "list",
          "cachedResultName": "Matching_Results",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=667122089"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "slip_ref"
          ],
          "schema": [
            {
              "id": "match_timestamp",
              "displayName": "match_timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "match_status",
              "displayName": "match_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "match_type",
              "displayName": "match_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_blacklisted",
              "displayName": "is_blacklisted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slip_ref",
              "displayName": "slip_ref",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "slip_datetime",
              "displayName": "slip_datetime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slip_amount",
              "displayName": "slip_amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slip_sender",
              "displayName": "slip_sender",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "slip_bank",
              "displayName": "slip_bank",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stm_ref",
              "displayName": "stm_ref",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stm_datetime",
              "displayName": "stm_datetime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "stm_amount",
              "displayName": "stm_amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "blacklist_account        ",
              "displayName": "blacklist_account        ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "blacklist_details",
              "displayName": "blacklist_details",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3024,
        -1232
      ],
      "id": "ed3ff5b5-a39d-48b8-b119-5f68357656e1",
      "name": "m_results",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd03a841-45e8-46c6-9911-61c447e8dc32",
              "leftValue": "={{ $json.confidence_score }}",
              "rightValue": 0.99,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -7440,
        -1200
      ],
      "id": "54b90e45-d3f7-4ea1-a18b-a2290fb36fb9",
      "name": "QC"
    },
    {
      "parameters": {
        "content": "## RestRoom 😉\n**รวม=>dtSet/1** t\"ห้องพักข้อมูล\" มันจะรวบรวมไฟล์ทุกใบที่วิ่งมาถึงมันภายในช่วงเวลา 10 วินาที ให้กลายเป็น \"ชุดข้อมูล\" ชุดเดียว"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -7040,
        -2208
      ],
      "typeVersion": 1,
      "id": "070ef4bb-5351-4d2a-b44c-0bf8e032365b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "=",
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -6352,
        -1168
      ],
      "id": "79a6efdc-3e83-420d-ba05-a8035230d998",
      "name": "Date & Time",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// --- Input Data ---\n// item[0] จะเป็นข้อมูลสลิปที่ผ่านการแปลงวันที่แล้ว\n// item[1] จะเป็นข้อมูลอัตราแลกเปลี่ยนจาก API ธปท.\n\nconst slipData = items[0].json;\nconst exchangeRateApiResponse = items[1].json;\n\nconst originalAmount = parseFloat(slipData.จำนวนเงิน);\nconst originalCurrency = slipData.สกุลเงิน; // รับสกุลเงินแบบไดนามิก\n\n// --- Initialize Variables ---\nlet amount_thb = null;\nlet exchange_rate_used = null;\nlet rate_found = false;\n\n// --- Logic ---\n// ตรวจสอบว่า API ตอบกลับมาพร้อมข้อมูลหรือไม่\nif (exchangeRateApiResponse.result && exchangeRateApiResponse.result.data.data_detail.length > 0) {\n  const rates = exchangeRateApiResponse.result.data.data_detail;\n  \n  // ค้นหาอัตราแลกเปลี่ยนของสกุลเงินที่ต้องการจาก response ของ API\n  const rateInfo = rates.find(rate => rate.currency_id === originalCurrency);\n  \n  if (rateInfo) {\n    // ใช้ mid_rate (อัตรากลาง) เพื่อความแม่นยำ\n    exchange_rate_used = parseFloat(rateInfo.mid_rate);\n    // คำนวณเป็นเงินบาทและปัดเศษ\n    amount_thb = (originalAmount * exchange_rate_used).toFixed(2);\n    rate_found = true;\n  }\n}\n\n// --- Handle Errors ---\n// กรณีหาเรทไม่เจอ (อาจเป็นวันหยุด หรือสกุลเงินที่ไม่มีใน API)\nif (!rate_found) {\n  // คุณสามารถเพิ่มการแจ้งเตือน Error หรือใส่ค่า default ได้ที่นี่\n  // ในตอนนี้เราจะปล่อยให้เป็น null ไปก่อน\n}\n\n// --- Output ---\n// เพิ่มข้อมูลใหม่เข้าไปใน Object เดิมของสลิป\nslipData.amount_thb = amount_thb;\nslipData.exchange_rate_used = exchange_rate_used;\n\n// ส่งข้อมูลที่สมบูรณ์แล้วกลับออกไป\nreturn slipData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6032,
        -1168
      ],
      "id": "0ff9d4e1-5d26-4c31-8ab3-a3fd4a0e9c0f",
      "name": "Cal THB",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "expression",
        "output": "={{ $json[\"callback_query\"] ? 0 : ($json[\"message\"] && $json[\"message\"][\"reply_to_message\"] ? 1 : ($json[\"message\"] && ($json[\"message\"][\"photo\"] || $json[\"message\"][\"document\"]) ? 2 : 3)) }}\n"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -11232,
        -1168
      ],
      "id": "d3678df8-ea15-4671-b213-99fc1deecac4",
      "name": "Switch Types"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "=1660316786",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "={{ $('JS-AI').item.json['เลขอ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $('JS-AI').item.json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "บันทึกช่วยจำ": "={{ $json['บันทึกช่วยจำ'] }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -6016,
        -912
      ],
      "id": "93cc8c5a-6028-452c-9c5e-fc7f15201247",
      "name": "$",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const matches = $json.matches || [];\nconst notFound = $json.notFound || [];\nconst outMsgs = [];\n\nif (matches.length === 0 && notFound.length === 0) {\n  outMsgs.push(\"ไม่พบรายการที่จะตรวจสอบ (ไม่มี slips/statements)\");\n} else {\n  outMsgs.push(`สรุปการตรวจ: พบ ${matches.length} รายการ match, ${notFound.length} รายการไม่พบ`);\n  matches.forEach((m, idx) => {\n    const slipAcc = m.slipAccount || (m.slip && (m.slip['เลขที่บัญชี']||''));\n    const stAcc = m.statementAccount || (m.statement && (m.statement['เลขที่บัญชี']||''));\n    const black = m.blacklist ? \"❌ ถูก blacklist\" : \"✅ ไม่พบใน blacklist\";\n    const nameMatch = (m.nameMatch === null) ? \"ชื่อไม่พอข้อมูล\" : (m.nameMatch ? \"ชื่อตรงกัน\" : \"ชื่อไม่ตรง\");\n    const amt = m.slip && (m.slip['จำนวนเงิน'] || '');\n    const refSlip = m.slip && (m.slip['เลขอ้างอิง']||'');\n    const refSt = m.statement && (m.statement['เลขอ้างอิง']||'');\n    outMsgs.push(`\\n#${idx+1} (${m.matchType})\nเลขบัญชี (slip) : ${slipAcc}\nเลขบัญชี (statement): ${stAcc}\nจำนวนเงิน: ${amt}\nref (slip/stm): ${refSlip} / ${refSt}\n${black} | ${nameMatch}`);\n  });\n  if (notFound.length) {\n    outMsgs.push(\"\\nรายการที่หาไม่พบใน statement:\");\n    notFound.forEach((n,i)=>{\n      const slipAcc = n.slip && (n.slip['เลขที่บัญชี']||'');\n      const amt = n.slip && (n.slip['จำนวนเงิน']||'');\n      outMsgs.push(`${i+1}. เลขบัญชี: ${slipAcc} จำนวนเงิน: ${amt} blacklist: ${n.blacklist ? '❌':''}`);\n    });\n  }\n}\n\nreturn [{ json: { text: outMsgs.join(\"\\n\\n\") } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3184,
        -976
      ],
      "id": "d4ea5a7e-3f9f-40ba-bde0-f04380266df4",
      "name": "dashboard",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.iapp.co.th/document-ocr/ocr",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "HieW8Y2y3rqjG8lXqvPHuDUWjGVlXrbL"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8576,
        -1408
      ],
      "id": "f39fba05-678b-4dd2-ab8f-ceaca39c89b4",
      "name": "iAppTech",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1771171886,
          "mode": "list",
          "cachedResultName": "KBank",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1771171886"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "เลขอ้างอิง": "={{ $json['เลขอ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "บันทึกช่วยจำ": "={{ $json['บันทึกช่วยจำ'] }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "บันทึกช่วยจำ",
              "displayName": "บันทึกช่วยจำ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5456,
        -1200
      ],
      "id": "848c4b68-1d4a-4572-a918-ad29064decd9",
      "name": "KBank",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "SCB",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "359c0581-9e57-43aa-ad94-e8c0ae2cc5b6"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4efbb30f-5042-4772-8de1-09d248599736",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "StmKB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "238333ae-2760-4c1a-a814-9f2e519af922",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "=PromptPay",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "47492068-6d41-4c0d-9879-eb3dff3911e9",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "StmMymo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8289ec14-6337-4303-8e8b-3cec224727e5",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "StmMBK",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9bcc8619-8565-41f7-8aec-b107eba46597",
                    "leftValue": "={{ $json['จากธนาคาร'] }}",
                    "rightValue": "KTB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -7760,
        -608
      ],
      "id": "47b74efa-13f1-4087-a395-946f6b0be8b2",
      "name": "Switch2"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1641093238,
          "mode": "list",
          "cachedResultName": "Stm_SCB",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1641093238"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        -640
      ],
      "id": "456f861a-903f-48b8-9df0-5eebbe1b1ad7",
      "name": "StmSCB",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1771171886,
          "mode": "list",
          "cachedResultName": "KBank",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1771171886"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        -448
      ],
      "id": "d28d9fcb-00b3-4f9f-8a05-1b3c6f6f05d4",
      "name": "StmKB",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1793208727,
          "mode": "list",
          "cachedResultName": "Stm_BBL",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1793208727"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        -272
      ],
      "id": "afacfa36-2cca-4857-86de-81b5720cc4b9",
      "name": "StmBBL",
      "executeOnce": false,
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1231796122,
          "mode": "list",
          "cachedResultName": "Stm_Mymo",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1231796122"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        -112
      ],
      "id": "d2893450-abb9-4772-900e-5d594c2f9da0",
      "name": "StmMymo",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1399242499,
          "mode": "list",
          "cachedResultName": "Stm_Make",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1399242499"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        64
      ],
      "id": "2277c57a-3d47-4580-9c22-d3139cd08e90",
      "name": "StmMBK",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 517963163,
          "mode": "list",
          "cachedResultName": "Stm_KTB",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=517963163"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "เลขอ้างอิง": "={{ $json['หมายเลขเช็ค/อ้างอิง'] }}",
            "ชื่อผู้โอน": "={{ $json['ชื่อผู้โอน'] }}",
            "ชื่อผู้รับ": "={{ $json['ชื่อผู้รับ'] }}",
            "จำนวนเงิน": "={{ $json['จำนวนเงิน'] }}",
            "วันเวลา ที่ทำรายการ": "={{ $json['วันเวลา ที่ทำรายการ'] }}",
            "รายละเอียด": "={{ $json['รายละเอียด'] }}",
            "TYPE": "={{ $json.type }}",
            "จากธนาคาร": "={{ $json['จากธนาคาร'] }}",
            "ยอดคงเหลือ": "={{ $json['ยอดคงเหลือ'] }}"
          },
          "matchingColumns": [
            "เลขอ้างอิง"
          ],
          "schema": [
            {
              "id": "ชื่อผู้โอน",
              "displayName": "ชื่อผู้โอน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ชื่อผู้รับ",
              "displayName": "ชื่อผู้รับ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จำนวนเงิน",
              "displayName": "จำนวนเงิน",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "วันเวลา ที่ทำรายการ",
              "displayName": "วันเวลา ที่ทำรายการ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "เลขอ้างอิง",
              "displayName": "เลขอ้างอิง",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "รายละเอียด",
              "displayName": "รายละเอียด",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "จากธนาคาร",
              "displayName": "จากธนาคาร",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ยอดคงเหลือ",
              "displayName": "ยอดคงเหลือ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TYPE",
              "displayName": "TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -7152,
        240
      ],
      "id": "8ab36a4f-c2c0-440b-8aa8-e5d076664025",
      "name": "StmKTb",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1641093238,
          "mode": "list",
          "cachedResultName": "Stm_SCB",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=1641093238"
        },
        "options": {
          "outputFormatting": {
            "values": {
              "general": "FORMATTED_VALUE",
              "date": "FORMATTED_STRING"
            }
          },
          "returnFirstMatch": false
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5920,
        -480
      ],
      "id": "d42dabc2-5edb-4904-b047-a21b7a9df0c2",
      "name": "Getscb1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 781640787,
          "mode": "list",
          "cachedResultName": "AllSlips",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=781640787"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4704,
        -1200
      ],
      "id": "e4807b99-dd7b-47a3-89ed-d90312eda29a",
      "name": "GetAllSlips",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "134fbcda-262e-4084-8152-2dc9bbcbd990",
                    "leftValue": "={{ $json.queryType }}",
                    "rightValue": "number",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a2aa1b13-1968-4a89-b04e-da0aca1c2c80",
                    "leftValue": "={{ $json.queryType }}",
                    "rightValue": "name",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -10096,
        -2048
      ],
      "id": "99f8874f-94fe-407b-8ca8-3c9837cf7214",
      "name": "Ac or Name?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/bank-detail/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "wJNw3Cg6GWMI-ZuaP60exjg4WSG_9aCr6XOO3uIhDSI"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.query }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -9808,
        -2544
      ],
      "id": "722f0895-abe1-4e4b-b699-e8da52a0be59",
      "name": "bank-detail",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/fullname-summary/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "wJNw3Cg6GWMI-ZuaP60exjg4WSG_9aCr6XOO3uIhDSI"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.query }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -9792,
        -2080
      ],
      "id": "68349c92-4302-4fcd-82f3-124ea92ab0bd",
      "name": "name-sum",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/fullname-detail/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "wJNw3Cg6GWMI-ZuaP60exjg4WSG_9aCr6XOO3uIhDSI"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.query }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -9792,
        -1904
      ],
      "id": "74f7d145-ee92-448d-8f00-53434f2cd63d",
      "name": "name-del",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -9488,
        -1984
      ],
      "id": "18a54abb-7192-4a4d-85d4-06d3081aa3a3",
      "name": "MergeName"
    },
    {
      "parameters": {
        "jsCode": "// --- 1. \"แกะกล่อง\" ชั้นนอกสุดก่อน ---\n// 'data' คือกล่องใหญ่ที่ห่อทุกอย่างไว้ ซึ่งก็คือ items[0].json\nconst data = items[0].json;\n\n// --- 2. ดึงข้อมูลจากแต่ละส่วนในกล่อง ---\n// 'records' อยู่ใน \"ผลลัพธ์จาก API\" ซึ่งเก็บอยู่ใน property 'body'\nconst records = data.body.result?.data || [];\n\nlet firstName = '';\nlet lastName = '';\n\n// --- 3. สกัดชื่อ-นามสกุล (เหมือนเดิม) ---\nif (records.length > 0) {\n  firstName = records[0].first_name || '';\n  lastName = records[0].last_name || '';\n}\n\n// --- 4. สร้าง query ใหม่ และส่งต่อข้อมูลทั้งหมด ---\n// เราจะส่งต่อ \"กล่องใหญ่\" (data) ทั้งหมดไปเลย เพื่อให้ข้อมูลไม่ตกหล่น\nreturn [{\n  json: {\n    ...data, // ส่งต่อข้อมูลทั้งหมดในกล่องใหญ่ (ทั้ง body และ json เดิม)\n    fullname_query: { \n      \"first_name\": firstName,\n      \"last_name\": lastName\n    } // แล้วเพิ่ม query ใหม่ของเราเข้าไป\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9552,
        -2384
      ],
      "id": "701898aa-e9d2-421e-a25d-b2ad849b3ac6",
      "name": "Extract Fullname & Prepare"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/fullname-summary/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "wJNw3Cg6GWMI-ZuaP60exjg4WSG_9aCr6XOO3uIhDSI"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.fullname_query }}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -9344,
        -2448
      ],
      "id": "d167eb44-06ec-47fa-b53c-9609c25f9bda",
      "name": "name-sum4Bank",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.blacklistseller.com/api/api/v1/queries/fullname-detail/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-Key",
              "value": "wJNw3Cg6GWMI-ZuaP60exjg4WSG_9aCr6XOO3uIhDSI"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.fullname_query }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -9344,
        -2256
      ],
      "id": "bba14305-9fcd-456b-bbaa-4b348f9d757a",
      "name": "name-del4Bank",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -9104,
        -2320
      ],
      "id": "aac7a10b-a0d7-47ff-978a-77b38b7ebb76",
      "name": "Merge Bank Results"
    },
    {
      "parameters": {
        "jsCode": "// แยก records/data ใน CheckBlack ออกเป็น item แยก\nconst base = {\n  account: $json.account || $json.data?.[0]?.account || 'ไม่ระบุ',\n  found: $json.found ?? true,\n  reports_count: $json.reports_count || $json.data?.length || 0,\n  total_loss: $json.total_price || $json.total_loss || 0,\n};\n\n// ตรวจเวลาตรวจสอบ\nconst nowThai = $now.setZone('Asia/Bangkok').toFormat('dd/MM/yyyy HH:mm:ss', { locale: 'th' });\n\n// ถ้าเจอใน blacklist (found = true) ใช้เวลาจากข้อมูลจริง\n// ถ้าไม่เจอ (found = false) ใช้เวลาปัจจุบันเลย\nbase[\"วันเวลา ที่เกิดเหตุ\"] =\n  base.found === false\n    ? nowThai\n    : ($json.data?.[0]?.date || nowThai);\n\nconst records = $json.data || $json.records || [];\nif (!Array.isArray(records) || records.length === 0) {\n  return [{ json: base }];\n}\n\nreturn records.map(r => ({\n  json: {\n    ...base,\n    report_id: r.report_id || '',\n    product: r.product || '',\n    price: r.price || '',\n    detail_text: r.detail_text || '',\n    website: r.website || '',\n    bank_number: (r.banks && r.banks[0]?.bank_number) || '',\n    bank_abbre: (r.banks && r.banks[0]?.abbre) || '',\n    // ถ้ามี date จริงใน record ใช้อันนั้น ไม่งั้น fallback เป็นวันตรวจปัจจุบัน\n    \"วันเวลา ที่เกิดเหตุ\": r.date || nowThai\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8624,
        -1824
      ],
      "id": "7f5a2639-1f36-48ee-9d52-6e8281a43140",
      "name": "SplitRecords"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc",
          "mode": "list",
          "cachedResultName": "slip",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2032423560,
          "mode": "list",
          "cachedResultName": "Blacklist",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rclnpb5VozipxHssUtAym09aqOElnmj8uQo1tsoNGNc/edit#gid=2032423560"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "ชื่อผู้ต้องสงสัย",
              "lookupValue": "={{ ($json.query.first_name + \" \" + $json.query.last_name).toLowerCase() }}"
            },
            {
              "lookupColumn": "เลขบัญชี",
              "lookupValue": "={{ $json.query.bank_number || \"\" }}"
            }
          ]
        },
        "combineFilters": "OR",
        "options": {
          "returnFirstMatch": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -10704,
        -2096
      ],
      "id": "1af72f08-aa0d-44d3-84a4-a491150dba7e",
      "name": "4Cache",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QFtskcJyZAep9z1d",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- Node: ProcessLookup (Corrected Version) ---\nconst allInputs = $input.all(); // Input ทั้งหมด (จาก 4Cache)\nconst originalInput = $('UserReplyAc').item.json; // ข้อมูลดั้งเดิมจาก UserReplyAc\n\nconst CACHE_EXPIRY_DAYS = 30; // ปรับตามนโยบาย\n\n// --- 1. ดึง \"คำค้นหา\" จาก UserReplyAc ---\nlet queryValue = '';\nif (originalInput.query?.bank_number) {\n  queryValue = String(originalInput.query.bank_number);\n} else if (originalInput.query?.first_name && originalInput.query?.last_name) {\n  queryValue = `${originalInput.query.first_name} ${originalInput.query.last_name}`;\n} else {\n  queryValue = originalInput.raw || ''; // Fallback ใช้ raw input\n}\n// Clean query for comparison (ถ้าเป็นเลขบัญชี)\nconst cleanQuery = queryValue.replace(/\\D/g, '').trim();\nconst queryIsNumeric = originalInput.queryType === 'number';\n\nlet foundInSheet = false;\nlet cacheData = null;\nlet isFresh = false;\n\n// Helper function to normalize account number\nfunction normalizeAccount(val) {\n  if (val === null || val === undefined) return '';\n  return String(val).replace(/\\D/g, '').trim();\n}\n// Helper function to normalize name\nfunction normalizeName(val) {\n   if (val === null || val === undefined) return '';\n   // ลบคำนำหน้า, เว้นวรรค, ทำให้เป็นตัวเล็ก (อาจต้องปรับปรุงเพิ่ม)\n   return String(val).toLowerCase().replace(/^(นาย|นางสาว|นาง|น\\.ส\\.)\\s*/, '').replace(/\\s+/g, '');\n}\n\n// --- 2. วนลูปหาข้อมูลที่ตรงกันใน Input (ผลลัพธ์จาก 4Cache) ---\nfor (const item of allInputs) {\n  const j = item.json || {};\n\n  // Check if the item itself is the direct row data (like from your 4Cache output)\n  if (j['เลขบัญชี'] || j['ชื่อผู้ต้องสงสัย'] || j['report_id'] || j['row_number']) {\n    let match = false;\n    if (queryIsNumeric) {\n      const accInSheet = normalizeAccount(j['เลขบัญชี']);\n      if (accInSheet && accInSheet === cleanQuery) {\n        match = true;\n      }\n    } else {\n      // Compare names (อาจต้องปรับปรุง logic การเทียบชื่อให้ดีขึ้น)\n      const nameInSheet = normalizeName(j['ชื่อผู้ต้องสงสัย']);\n      const queryNameNormalized = normalizeName(queryValue);\n      if (nameInSheet && queryNameNormalized && nameInSheet === queryNameNormalized) {\n        match = true;\n      }\n    }\n\n    if (match) {\n      foundInSheet = true;\n      cacheData = j; // ใช้ข้อมูลแถวที่เจอโดยตรง\n      break; // เจอแล้ว ออกเลย\n    }\n  }\n  // (อาจเพิ่ม logic การตรวจสอบ j.rows หรือ j.row ถ้า Node ก่อนหน้าส่งมาในรูปแบบอื่น)\n}\n\n// --- 3. ตรวจสอบความสดใหม่ (ถ้าเจอ) ---\nif (foundInSheet && cacheData) {\n  // พยายามหา timestamp จากหลายๆ field ที่เป็นไปได้\n  const ts = cacheData.timestamp || cacheData['timestamp'] || cacheData['วันเวลา ที่เกิดเหตุ'] || cacheData['date'] || null;\n  if (ts) {\n    try {\n      const last = new Date(ts);\n      const now = new Date();\n      const diffDays = (now - last) / (1000 * 60 * 60 * 24);\n      isFresh = diffDays <= CACHE_EXPIRY_DAYS;\n    } catch (e) {\n      console.error(\"Error parsing cache timestamp:\", ts, e);\n      isFresh = false; // ถ้าแปลงวันที่ไม่ได้ ถือว่าไม่สด\n    }\n  } else {\n    isFresh = false; // ไม่มี timestamp ถือว่าไม่สด\n  }\n}\n\n// --- 4. คืนค่า ---\nreturn [{\n  json: {\n    ...originalInput, // ส่งต่อข้อมูลเดิมจาก UserReplyAc\n    cache: {\n      foundInSheet,\n      isFresh,\n      data: cacheData // ข้อมูลจากชีทที่เจอ (หรือ null ถ้าไม่เจอ)\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10512,
        -2160
      ],
      "id": "f2bfc7df-7741-471e-91a0-46c1318e63cf",
      "name": "ProcessLookup"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.cache.foundInSheet }}",
                    "rightValue": "=true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "90d539c9-b828-429b-84b9-eaa9b96be31c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Use Cache"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a423bf83-9c7f-452b-845d-daba0020fbb5",
                    "leftValue": "={{ $json.cache.foundInSheet }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Call API"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -10352,
        -2160
      ],
      "id": "5fa0c1b5-39a6-4ea5-b137-11c3ea1bc4ad",
      "name": "DecideUseCache"
    },
    {
      "parameters": {
        "jsCode": "// Node: FormatCachedData (Adapted for 'Blacklist' Sheet Structure)\nconst originalInput = $('UserReplyAc').item.json;\nconst c = $json.cache?.data || {}; // Data from the 'Blacklist' sheet row found by 4Cache\n\n// --- 1. Determine 'account' based on original query type ---\nlet account = '';\n// ใช้ค่าจากชีทก่อน ถ้าไม่มีค่อยใช้จาก query เดิม\nif (originalInput.queryType === 'number') {\n  account = String(c['เลขบัญชี'] || originalInput.query?.bank_number || '');\n} else {\n  account = c['ชื่อผู้ต้องสงสัย'] || `${originalInput.query?.first_name || ''} ${originalInput.query?.last_name || ''}`.trim();\n}\n// Clean the account number if needed (remove non-digits)\nif (originalInput.queryType === 'number') {\n  account = account.replace(/\\D/g, '');\n}\n\n\n// --- 2. Extract summary info using Thai column names ---\n// แปลง 'Status' (อาจเป็น boolean true/false หรือ string 'true'/'false') เป็น boolean\nconst found = (String(c.Status || 'false').toLowerCase() === 'true');\n// แปลง 'ประวัติทั้งหมด' เป็นตัวเลข, ถ้าไม่มีให้เป็น 0\nconst reports_count = parseInt(c['ประวัติทั้งหมด'] || 0);\n// แปลง 'TotalPrice' เป็นตัวเลขทศนิยม, ถ้าไม่มีให้เป็น 0\nconst total_loss = parseFloat(c.TotalPrice || 0);\n\n// --- 3. Construct a SINGLE 'record' object from the cache row ---\n// *** สำคัญ: นี่จะมีแค่ข้อมูลจากแถวเดียว ไม่ใช่ทุก records เหมือน API ***\nconst singleRecord = {\n  report_id: c.report_id || null,\n  product: c.product || null,\n  price: parseFloat(c.Price || 0), // แปลง 'Price' เป็นตัวเลข\n  detail_text: c.details || null,\n  date: c['วันเวลา ที่เกิดเหตุ'] || null,\n  website: c.website || null,\n  banks: [{ // สร้างโครงสร้าง banks ให้คล้าย API\n    bank_id: null, // ข้อมูล bank_id ไม่มีในชีทนี้\n    bank_number: String(c['เลขบัญชี'] || ''), // ใช้ 'เลขบัญชี'\n    abbre: c.bank || null // ใช้ 'bank' (เช่น KTB)\n  }],\n  // ใส่ค่า summary ลงใน record แรก เพื่อให้ใกล้เคียง API response\n  freq_count: reports_count,\n  total_price: total_loss\n};\n\n// --- 4. Get source_chat_id ---\nconst source_chat_id = originalInput.source_chat_id || null;\n\n// --- 5. Get timestamp ---\n// *** สำคัญ: Sheet 'Blacklist' ไม่มี timestamp การตรวจสอบจริงๆ ***\n// เราจะใช้ 'วันเวลา ที่เกิดเหตุ' แทนชั่วคราว แต่มันไม่ใช่เวลา cache ที่ถูกต้อง\nconst cache_timestamp = c['วันเวลา ที่เกิดเหตุ'] || null;\n\n// --- 6. Return formatted data ---\nreturn [{\n  json: {\n    account: account,\n    found: found,\n    reports_count: reports_count,\n    total_loss: total_loss,\n    // ถ้า 'found' เป็น true ให้ส่ง singleRecord ใน array, ถ้าไม่เจอ ส่ง array ว่าง\n    records: found ? [singleRecord] : [],\n    source_chat_id: source_chat_id,\n    _cached: true, // บอกว่ามาจาก Cache\n    _cache_timestamp: cache_timestamp // ใช้ timestamp จากชีท (ไม่แม่นยำ)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10080,
        -2288
      ],
      "id": "cc72cb3e-a2a7-4613-9572-1d897ba34687",
      "name": "FormatCachedData"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "base64",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -9008,
        -1120
      ],
      "id": "f08a7be4-20b3-4517-a37e-16505bf5d354",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://vision.googleapis.com/v1/images:annotate?key=AIzaSyCSd5Kn24vQSVaSulSlA3Nx3i7cDefC5Hg",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"requests\": [\n    {\n      \"image\": {\n        \"content\": \"{{ $json.base64 }}\"\n      },\n      \"features\": [\n        {\n          \"type\": \"DOCUMENT_TEXT_DETECTION\"\n        }\n      ],\n      \"imageContext\": {\n        \"languageHints\": [\n          \"th\"\n        ]\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8352,
        -1408
      ],
      "id": "2e5c1cc2-1ae0-42d5-8745-b3b21a7297d8",
      "name": "CloudVission2",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Build Cloud Vision Batch Request (v2)\nconst requests = [];\nconst originals = [];\n\nfor (let i = 0; i < items.length && i < 100; i++) { // <= limit 100\n  const item = items[i];\n  let base64 =\n    item.binary?.data?.data?.toString('base64') ||\n    item.json?.base64 ||\n    item.json?.file_base64 ||\n    null;\n\n  if (!base64) continue;\n\n  requests.push({\n    image: { content: base64 },\n    features: [{ type: \"DOCUMENT_TEXT_DETECTION\" }],\n    imageContext: { languageHints: [\"th\"] }\n  });\n\n  originals.push({\n    index: i,\n    fileId: item.json?.fileId || null,\n    filename: item.json?.filename || null,\n    chatId: item.json?.chatId || null,\n    media_group_id: item.json?.media_group_id || null\n  });\n}\n\nif (requests.length === 0) {\n  return [{ json: { error: \"ไม่มีรูปใน batch นี้\" } }];\n}\n\n// ส่ง batch เดียวไป Vision\nreturn [{\n  json: {\n    requests,\n    originals,\n    total: requests.length\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8720,
        -1104
      ],
      "id": "d95a6504-00df-4a8b-a830-f69024b9ceab",
      "name": "Build Vision Requests",
      "executeOnce": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📫ทำรายการบันทึก เสร็จเรียบร้อยค่ะ🏜️\n\n📄 จำนวนสลิปที่ประมวลผล: {{ $items.length }} ใบ\n📆 ประมวลผลเมื่อ: {{ $now }}\n\n📍🏁🙏💛🍫🍅🍑🍋‍🟩🍉🍇🍣🍕🍧🌹🌺🦋🥀🥩🥓🍟🍔🌽🥕🍆🥑\n\n🏖️ทั้งหมดถูกบันทึกเข้าสู่ระบบเรียบร้อยแล้วค่ะ💚",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5536,
        -2144
      ],
      "id": "f329400f-07cf-4997-99c6-de65b2d4878d",
      "name": ">10",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📊 รายงานผลการรับสลิป\n🤍🩶🖤🤎💜🩵💙💚💛🧡🩷❤️💗\n📄จำนวนสลิปทั้งหมด: {{ $('Sumitem').item.json.total_slips }} ใบ\n💰ยอดรวมทั้งหมด: {{ $('Sumitem').item.json.total_amount }} บาท\n📆 ประมวลผลเมื่อ: {{ $now.setZone('Asia/Bangkok').toFormat('dd/MM/yyyy HH:mm:ss', { locale: 'th' }) }}\n🌈ธนาคาร: {{ $('Sumitem').item.json.items[0]['จากธนาคาร'] }}\n\n\n📍🏁🙏💛🍫🍅🍑🍋‍🟩🍉🍇🍣🍕🍧🌹🌺🦋🥀🥩🥓🍟🍔🌽🥕🍆🥑\n\n🏖️ทั้งหมดถูกบันทึกเข้าสู่ระบบเรียบร้อยแล้วค่ะมายบู💝",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4160,
        -1968
      ],
      "id": "3e97c83f-e3b0-4423-970d-f143a34bddf2",
      "name": ">",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const itemsIn = items;\nlet total = itemsIn.length;\nlet totalAmount = 0;\nlet banks = {};\nlet lowConfCount = 0;\n\nfor (let i = 0; i < itemsIn.length; i++) {\n  const j = itemsIn[i].json || {};\n  const amt = j['จำนวนเงิน'] || j['amount'] || j['จำนวน'] || j['price'] || null;\n  if (amt !== null && amt !== undefined) {\n    const n = parseFloat(String(amt).replace(/[^0-9\\.\\-]/g,''));\n    if (!isNaN(n)) totalAmount += n;\n  }\n  const bank = j['จากธนาคาร'] || j['fromBank'] || j['bank'] || 'unknown';\n  banks[bank] = (banks[bank] || 0) + 1;\n  if (j['confidence_score'] !== undefined && j['confidence_score'] < 0.8) lowConfCount++;\n}\n\nconst bankSummary = Object.entries(banks).map(([b,c]) => `${b}:${c}`).join(', ');\nconst formattedTotal = totalAmount ? totalAmount.toFixed(2) : null;\n\nconst summary = {\n  total_slips: total,\n  total_amount: formattedTotal,\n  bank_summary: bankSummary,\n  low_confidence_count: lowConfCount,\n  preview: itemsIn.slice(0,5).map(it => ({\n    name_from: it.json['ชื่อผู้โอน'] || it.json['from'] || null,\n    name_to: it.json['ชื่อผู้รับ'] || it.json['to'] || null,\n    amount: it.json['จำนวนเงิน'] || null,\n    reference: it.json['เลขอ้างอิง'] || null\n  })),\n  items: itemsIn.map(it => it.json)\n};\n\nreturn [{ json: summary }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -1856
      ],
      "id": "2ce3a43e-91b5-4553-985d-17067f6dd975",
      "name": "Sumitem",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9863ccc4-2ac9-4165-9d52-7752b62fefb1",
              "leftValue": "={{ $json.total_slips }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4560,
        -1856
      ],
      "id": "1979d88b-ddab-441b-a308-77acc02f408f",
      "name": "count"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4768,
        -1696
      ],
      "id": "f40f6f65-5cc0-4ef2-8da6-d6cd02f7950f",
      "name": "Loop Over Items2",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me2",
      "typeVersion": 1,
      "position": [
        -4608,
        -1648
      ],
      "id": "01a70770-e5c1-43b6-b75d-998b381a3b1f"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📫ทำรายการบันทึก เสร็จเรียบร้อยค่ะ🏜️\n🧑‍🚀ชื่อผู้โอน : {{ $json['ชื่อผู้โอน'] }}\n🏋️ชื่อผู้รับ : {{ $json['ชื่อผู้รับ'] }}\n💰จำนวนเงิน : {{ $json['จำนวนเงิน'] }} บาท\n⏰วันเวลา ที่ทำรายการ : {{ $('Switch').item.json.raw_parsed['วันที่ทำรายการ'] }}\n🍓🥑🌽🍇🏓🏆✨🏇🤶🏜️🌊🪬🩺💰🪙☎️🗝️🪒🪭🧣🥽🖍️🫧🧽🪥\nบันทึกช่วยจำ :{{ $json['บันทึกช่วยจำ'] }}\n🌈จากธนาคาร :{{ $json['จากธนาคาร'] }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5232,
        -2144
      ],
      "id": "1fc46546-7466-4abc-96c6-1425e770b32e",
      "name": "SAVE1",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Function node: Split array-of-files into separate items\n// Place this right after the node that returns a single item containing an array of files.\n\nconst out = [];\nconst src = $json.files || $json.images || $json.originals || $json.items || $json.payload || $json; // try common names\n// if src is object with key, try known paths:\nif (!$json.files && $json.body && Array.isArray($json.body.files)) {\n  src = $json.body.files;\n}\n\n// If src is not array, try to find any array of objects inside $json\nif (!Array.isArray(src)) {\n  // try to find first array inside $json\n  for (const k of Object.keys($json)) {\n    if (Array.isArray($json[k]) && $json[k].length > 0) {\n      src = $json[k];\n      break;\n    }\n  }\n}\n\nif (!Array.isArray(src)) {\n  // nothing to split — return original item so upstream doesn't break\n  return items;\n}\n\n// create one output item per file\nfor (let i = 0; i < src.length; i++) {\n  out.push({ json: src[i] });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9296,
        -1104
      ],
      "id": "2386699c-8a9f-4da1-9eb1-126ac49d6bb8",
      "name": "Split"
    },
    {
      "parameters": {
        "jsCode": "//  Split Google Vision Responses (Final Version)\n// Input: HTTP Vision Response (1 item) -> Output: N items (1 ต่อรูป)\n\nconst out = [];\n\n//  ดึงข้อมูลจาก HTTP node อย่างถูกต้อง\nconst httpOut = items?.[0]?.json || $json || {};\n\n//  ตำแหน่ง responses (Vision output)\nconst responses =\n  httpOut.body?.responses ||   // ปกติ HTTP node\n  httpOut.responses ||         // fallback\n  [];\n\n//  ดึง originals จาก BuildRequests\nconst originals =\n  httpOut.originals ||\n  httpOut.json?.originals ||\n  httpOut.metadata?.originals ||\n  [];\n\n//  สร้าง item แยกทีละรูป\nfor (let i = 0; i < responses.length; i++) {\n  const res = responses[i] || {};\n\n  //  เลือกข้อความที่ดีที่สุด\n  const text =\n    res.fullTextAnnotation?.text?.trim() ||\n    res.textAnnotations?.[0]?.description?.trim() ||\n    null;\n\n  const orig = originals[i] || {};\n\n  out.push({\n    json: {\n      index: orig.index ?? i,\n      text,\n      fileId: orig.fileId ?? null,\n      filename: orig.filename ?? null,\n      chatId: orig.chatId ?? null,\n      media_group_id: orig.media_group_id ?? null,\n      visionResponse: res\n    }\n  });\n}\n\n//  กรณี responses ว่าง แต่ originals มี — คงจำนวน item เท่าเดิม\nif (out.length === 0 && originals.length > 0) {\n  for (let j = 0; j < originals.length; j++) {\n    const orig = originals[j];\n    out.push({\n      json: {\n        index: orig.index ?? j,\n        text: null,\n        fileId: orig.fileId ?? null,\n        filename: orig.filename ?? null,\n        chatId: orig.chatId ?? null,\n        media_group_id: orig.media_group_id ?? null,\n        visionResponse: {}\n      }\n    });\n  }\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8224,
        -1104
      ],
      "id": "b7b18ecf-54ac-4100-887c-a23f54065ca2",
      "name": "Split Vision Responses",
      "executeOnce": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📫ทำรายการบันทึก เสร็จเรียบร้อยค่ะ🏜️\n⏰วันเวลา ที่ทำรายการ :{{ $now.setZone('Asia/Bangkok').toFormat('dd/MM/yyyy HH:mm:ss', { locale: 'th' }) }}\n💯💗❤️🩷🧡💛💚💙🩵💜🤎🖤🩶🤍💯",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5984,
        320
      ],
      "id": "272d3d67-211e-49e7-8f3f-5611e91268f2",
      "name": "SAVE2",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "executeOnce": false,
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=📫ทำรายการบันทึก เสร็จเรียบร้อยค่ะ🏜️\n🧑‍🚀ชื่อเจ้าของ Statement :{{ $('Switch2').item.json['ชื่อผู้รับ'] }}\n⏰วันเวลา ที่ทำรายการ :{{ $now.setZone('Asia/Bangkok').toFormat('dd/MM/yyyy HH:mm:ss', { locale: 'th' }) }}\n🍓🥑🍇🏓🏆✨🏇🤶🏜️🌊🪬🩺💰🪙☎️🗝️🪒🪭🧣🖍️🫧🧽🪥\n🌈จากธนาคาร :{{ $json['จากธนาคาร'] }}\n💯💗❤️🩷🧡💛💚💙🩵💜🤎🖤🩶🤍💯",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -6032,
        -16
      ],
      "id": "d0ca2e69-6e48-45ba-a9aa-f3d6453d3d81",
      "name": "SAVE4",
      "webhookId": "b11471a5-95c1-4f15-8ca0-e8d7d1456f21",
      "credentials": {
        "telegramApi": {
          "id": "SmHWtWDFEcA6wGD9",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5776,
        320
      ],
      "id": "5dbb0bf1-5d8f-41ff-a8e8-11a6d6598cb6",
      "name": "Code in JavaScript",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "JS-AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "unk",
            "type": "main",
            "index": 0
          },
          {
            "node": "UNKNOWN1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JS-AI": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "KTB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MAKE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SCB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "BBL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MyMo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "KBank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KTB": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MAKE": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SCB": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BBL": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MyMo": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "bigestF": {
      "main": [
        [
          {
            "node": "Switch Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ParseSlip": {
      "main": [
        [
          {
            "node": "QC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "unk": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "UNKNOWN1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Type": {
      "main": [
        [
          {
            "node": "Sent Slip",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sent Stm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge slip/stm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BOT": {
      "main": [
        [
          {
            "node": "Cal THB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Statement": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sent Stm": {
      "main": [
        [
          {
            "node": "get file stm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sent Slip": {
      "main": [
        [
          {
            "node": "Get a file Slip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get file stm": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file Slip": {
      "main": [
        [
          {
            "node": "Split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "merg/page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MATCH1": {
      "main": [
        [
          {
            "node": "Format for Sheets",
            "type": "main",
            "index": 0
          },
          {
            "node": "dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Horse": {
      "main": [
        [
          {
            "node": "Pre-Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post-Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Query a callback": {
      "main": [
        [
          {
            "node": "Horse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Blacklist/Sheets": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "found",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "unfound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post-Check": {
      "main": [
        [
          {
            "node": "bigestF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge slip/stm": {
      "main": [
        [
          {
            "node": "Collect All Accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mstatement": {
      "main": [
        [
          {
            "node": "Blacklist/Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UserReplyAc": {
      "main": [
        [
          {
            "node": "4Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CheckBlack": {
      "main": [
        [
          {
            "node": "Isblack",
            "type": "main",
            "index": 0
          },
          {
            "node": "SplitRecords",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unblack",
            "type": "main",
            "index": 0
          },
          {
            "node": "SplitRecords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NumAc": {
      "main": [
        [
          {
            "node": "CheckBlack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect All Accounts": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Batch Blacklist Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Blacklist Check": {
      "main": [
        [
          {
            "node": "Aggregate BL Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate BL Results": {
      "main": [
        [
          {
            "node": "MATCH1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merg/page": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unblack": {
      "main": [
        []
      ]
    },
    "Format for Sheets": {
      "main": [
        [
          {
            "node": "m_results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QC": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "BOT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cal THB": {
      "main": [
        [
          {
            "node": "exchanges",
            "type": "main",
            "index": 0
          },
          {
            "node": "$",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Types": {
      "main": [
        [
          {
            "node": "Answer Query a callback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "UserReplyAc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "bigestF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Inline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dashboard": {
      "main": [
        [
          {
            "node": "Mstatement",
            "type": "main",
            "index": 0
          },
          {
            "node": "recap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KBank": {
      "main": [
        [
          {
            "node": "GetAllSlips",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sumitem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "StmSCB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "StmKB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "StmBBL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "StmMymo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "StmMBK",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "StmKTb",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmSCB": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmKB": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmKTb": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmBBL": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmMymo": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StmMBK": {
      "main": [
        [
          {
            "node": "Getscb1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Getscb1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "GetAllSlips": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "bank-detail": {
      "main": [
        [
          {
            "node": "Extract Fullname & Prepare",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "name-sum": {
      "main": [
        [
          {
            "node": "MergeName",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ac or Name?": {
      "main": [
        [
          {
            "node": "bank-detail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "name-del",
            "type": "main",
            "index": 0
          },
          {
            "node": "name-sum",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "name-del": {
      "main": [
        [
          {
            "node": "MergeName",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract Fullname & Prepare": {
      "main": [
        [
          {
            "node": "name-sum4Bank",
            "type": "main",
            "index": 0
          },
          {
            "node": "name-del4Bank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "name-sum4Bank": {
      "main": [
        [
          {
            "node": "Merge Bank Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "name-del4Bank": {
      "main": [
        [
          {
            "node": "Merge Bank Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Bank Results": {
      "main": [
        [
          {
            "node": "NumAc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MergeName": {
      "main": [
        [
          {
            "node": "NumAc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitRecords": {
      "main": [
        [
          {
            "node": "blCheck",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4Cache": {
      "main": [
        [
          {
            "node": "ProcessLookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProcessLookup": {
      "main": [
        [
          {
            "node": "DecideUseCache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DecideUseCache": {
      "main": [
        [
          {
            "node": "FormatCachedData",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ac or Name?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FormatCachedData": {
      "main": [
        [
          {
            "node": "CheckBlack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CloudVission": {
      "main": [
        [
          {
            "node": "Split Vision Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Build Vision Requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Vision Requests": {
      "main": [
        [
          {
            "node": "CloudVission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sumitem": {
      "main": [
        [
          {
            "node": "count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "count": {
      "main": [
        [
          {
            "node": ">",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SAVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me2": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Vision Responses": {
      "main": [
        [
          {
            "node": "ParseSlip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Isblack": {
      "main": [
        []
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Statement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CloudVission1": {
      "main": [
        []
      ]
    },
    "SAVE2": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4bdcfbca-9f08-41e5-a8f5-e18736af0ee1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9061a45f5132de8a0693d985ecddd8c16c8ca6a41cd187c7df8dc6f5a4c7da2d"
  },
  "id": "qSrzk5Jb46zbFX82",
  "tags": []
}